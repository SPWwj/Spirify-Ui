{"version":3,"file":"static/js/733.b0b7eee1.chunk.js","mappings":"gKACA,EAAgC,qC,SC4DhC,EAzDoC,WA6BnC,OACCA,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,GAyBlB,C","sources":["webpack://spirify/./src/pages/ChatComponent.module.scss?a68e","pages/ChatComponent.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chatComponent\":\"ChatComponent_chatComponent__8Je4v\",\"messageList\":\"ChatComponent_messageList__oUSKb\",\"chatInput\":\"ChatComponent_chatInput__SC6nX\",\"sendMessageButton\":\"ChatComponent_sendMessageButton__g3g3a\"};","// Your component file\r\nimport React from \"react\";\r\nimport styles from \"./ChatComponent.module.scss\";\r\n\r\nconst ChatComponent: React.FC<{}> = () => {\r\n\t// const [message, setMessage] = useState(\"\");\r\n\t// const [messages, setMessages] = useState<string[]>([]);\r\n\t// const signalR = useRef(SignalRService.getInstance());\r\n\t// useEffect(() => {\r\n\t// \tconst currentSignalR = signalR.current;\r\n\r\n\t// \tconst onMessageReceived = (user: string, receivedMessage: string) => {\r\n\t// \t\tsetMessages((prevMessages) => [\r\n\t// \t\t\t...prevMessages,\r\n\t// \t\t\t`${user}: ${receivedMessage}`,\r\n\t// \t\t]);\r\n\t// \t\tconsole.log(\"Received message: \", receivedMessage);\r\n\t// \t};\r\n\r\n\t// \tcurrentSignalR.registerOnServerEvents(onMessageReceived);\r\n\r\n\t// \treturn () => {\r\n\t// \t\tcurrentSignalR.removeOnServerEvents(onMessageReceived);\r\n\t// \t};\r\n\t// }, []);\r\n\r\n\t// const sendMessage = () => {\r\n\t// \tif (message.trim() !== \"\") {\r\n\t// \t\t// To prevent empty message sending\r\n\t// \t\tsignalR.current.send(\"user1\", message);\r\n\t// \t\tsetMessage(\"\");\r\n\t// \t}\r\n\t// };\r\n\treturn (\r\n\t\t<div className={styles.chatComponent}>\r\n\t\t\t{/* <List\r\n\t\t\t\tclassName={styles.messageList}\r\n\t\t\t\tbordered\r\n\t\t\t\tdataSource={messages}\r\n\t\t\t\trenderItem={(message) => <List.Item>{message}</List.Item>}\r\n\t\t\t/>\r\n\t\t\t<Input\r\n\t\t\t\tclassName={styles.chatInput}\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={message}\r\n\t\t\t\tonChange={(e) => setMessage(e.target.value)}\r\n\t\t\t\tonKeyDown={(e) => {\r\n\t\t\t\t\tif (e.key === \"Enter\") sendMessage();\r\n\t\t\t\t}} // Trigger send on Enter\r\n\t\t\t/>\r\n\t\t\t<Button\r\n\t\t\t\tclassName={styles.sendMessageButton}\r\n\t\t\t\ttype=\"primary\"\r\n\t\t\t\tonClick={sendMessage}\r\n\t\t\t>\r\n\t\t\t\tSend Message\r\n\t\t\t</Button> */}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChatComponent;\r\n"],"names":["_jsx","className","styles"],"sourceRoot":""}