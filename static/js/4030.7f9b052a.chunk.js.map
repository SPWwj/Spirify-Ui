{"version":3,"file":"static/js/4030.7f9b052a.chunk.js","mappings":"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","sources":["webpack://spirify/./src/components/LoginForm.module.scss?d49f","components/LoginForm.tsx","pages/LoginPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"LoginForm_formContainer__MQOUV\",\"loginForm\":\"LoginForm_loginForm__DMuBH\",\"ant-form-item\":\"LoginForm_ant-form-item__A9I9p\",\"ant-btn\":\"LoginForm_ant-btn__+FTYG\",\"registerButton\":\"LoginForm_registerButton__3wUQW\"};","import React, { useState } from \"react\";\r\nimport { Form, Input, Button, Checkbox, Spin } from \"antd\";\r\nimport styles from \"./LoginForm.module.scss\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\ninterface LoginFormProps {\r\n\tonSubmit: (values: {\r\n\t\tusername: string;\r\n\t\tpassword: string;\r\n\t\tremember?: boolean;\r\n\t}) => Promise<void>;\r\n\tenableRemember?: boolean;\r\n}\r\n\r\nexport const LoginForm: React.FC<LoginFormProps> = ({\r\n\tonSubmit,\r\n\tenableRemember,\r\n}) => {\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\tconst navigate = useNavigate();\r\n\r\n\tconst handleSubmit = async (values: {\r\n\t\tusername: string;\r\n\t\tpassword: string;\r\n\t\tremember?: boolean;\r\n\t}) => {\r\n\t\tsetIsLoading(true);\r\n\t\ttry {\r\n\t\t\tawait onSubmit(values);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading(false);\r\n\t\t}\r\n\t};\r\n\tconst handleRegister = () => {\r\n\t\tnavigate(\"/register\");\r\n\t};\r\n\treturn (\r\n\t\t<div className={styles.formContainer}>\r\n\t\t\t<Form className={styles.loginForm} onFinish={handleSubmit}>\r\n\t\t\t\t<Form.Item\r\n\t\t\t\t\tlabel=\"Username\"\r\n\t\t\t\t\tname=\"username\"\r\n\t\t\t\t\trules={[{ required: true, message: \"Please input your username!\" }]}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Input />\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t<Form.Item\r\n\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\trules={[{ required: true, message: \"Please input your password!\" }]}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Input.Password />\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t{enableRemember && (\r\n\t\t\t\t\t<Form.Item name=\"remember\" valuePropName=\"checked\">\r\n\t\t\t\t\t\t<Checkbox>Remember me</Checkbox>\r\n\t\t\t\t\t</Form.Item>\r\n\t\t\t\t)}\r\n\t\t\t\t<Form.Item>\r\n\t\t\t\t\t<Button type=\"primary\" htmlType=\"submit\" disabled={isLoading}>\r\n\t\t\t\t\t\t{isLoading ? (\r\n\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\tLoading...\r\n\t\t\t\t\t\t\t\t<Spin />\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<span>Log in</span>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\ttype=\"primary\"\r\n\t\t\t\t\t\tclassName={styles.registerButton}\r\n\t\t\t\t\t\tonClick={handleRegister}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tRegister\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { AuthContext } from \"context/AuthContext\";\r\nimport { LoginForm } from \"components/LoginForm\";\r\nimport { message } from \"antd\";\r\n\r\nconst LoginPage: React.FC = () => {\r\n\tconst navigate = useNavigate();\r\n\tconst location = useLocation(); // get the current location object\r\n\tconst { login } = useContext(AuthContext)!;\r\n\r\n\tconst handleSubmit = async (values: {\r\n\t\tusername: string;\r\n\t\tpassword: string;\r\n\t\tremember?: boolean;\r\n\t}) => {\r\n\t\t// Inside your login handler, after successful login...\r\n\t\tconst result = await login(\r\n\t\t\tvalues.username,\r\n\t\t\tvalues.password,\r\n\t\t\tvalues.remember || false\r\n\t\t);\r\n\t\tif (result) {\r\n\t\t\t// If we have state in the location and it has a 'from' field, navigate there\r\n\t\t\tif (location.state && location.state.from) {\r\n\t\t\t\tnavigate(location.state.from);\r\n\t\t\t} else {\r\n\t\t\t\t// Otherwise, navigate to the profile page\r\n\t\t\t\tnavigate(\"/profile\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tmessage.error(\"Invalid username or password\");\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<LoginForm onSubmit={handleSubmit} enableRemember={true} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default LoginPage;\r\n"],"names":["LoginForm","_ref","onSubmit","enableRemember","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","navigate","useNavigate","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","finish","stop","_x","apply","arguments","_jsx","className","styles","children","_jsxs","Form","onFinish","label","name","rules","required","message","Input","valuePropName","Checkbox","Button","type","htmlType","disabled","Spin","onClick","location","useLocation","login","useContext","AuthContext","username","password","remember","sent","state","from"],"sourceRoot":""}