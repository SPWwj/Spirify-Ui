{"version":3,"file":"static/js/397.80be57ed.chunk.js","mappings":"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","sources":["../node_modules/@microsoft/signalr/src/DefaultReconnectPolicy.ts","../node_modules/@microsoft/signalr/src/HeaderNames.ts","../node_modules/@microsoft/signalr/src/HttpClient.ts","../node_modules/@microsoft/signalr/src/AccessTokenHttpClient.ts","../node_modules/@microsoft/signalr/src/Errors.ts","../node_modules/@microsoft/signalr/src/Loggers.ts","../node_modules/@microsoft/signalr/src/Utils.ts","../node_modules/@microsoft/signalr/src/FetchHttpClient.ts","../node_modules/@microsoft/signalr/src/XhrHttpClient.ts","../node_modules/@microsoft/signalr/src/ITransport.ts","../node_modules/@microsoft/signalr/src/DefaultHttpClient.ts","../node_modules/@microsoft/signalr/src/AbortController.ts","../node_modules/@microsoft/signalr/src/LongPollingTransport.ts","../node_modules/@microsoft/signalr/src/ServerSentEventsTransport.ts","../node_modules/@microsoft/signalr/src/WebSocketTransport.ts","../node_modules/@microsoft/signalr/src/HttpConnection.ts","../node_modules/@microsoft/signalr/src/TextMessageFormat.ts","../node_modules/@microsoft/signalr/src/HandshakeProtocol.ts","../node_modules/@microsoft/signalr/src/IHubProtocol.ts","../node_modules/@microsoft/signalr/src/Subject.ts","../node_modules/@microsoft/signalr/src/HubConnection.ts","../node_modules/@microsoft/signalr/src/JsonHubProtocol.ts","../node_modules/@microsoft/signalr/src/HubConnectionBuilder.ts","../node_modules/@microsoft/signalr/src/ILogger.ts","../node_modules/antd/es/grid/RowContext.js","../node_modules/antd/es/grid/col.js","../node_modules/antd/es/grid/row.js","../node_modules/antd/es/grid/style/index.js","../node_modules/antd/es/list/Item.js","../node_modules/antd/es/list/style/index.js","../node_modules/antd/es/list/index.js"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly _retryDelays: (number | null)[];\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport abstract class HeaderNames {\r\n    static readonly Authorization = \"Authorization\";\r\n    static readonly Cookie = \"Cookie\";\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: MessageHeaders;\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n\r\n    /** This controls whether credentials such as cookies are sent in cross-site requests. */\r\n    withCredentials?: boolean;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string | ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string | ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    public getCookieString(url: string): string {\r\n        return \"\";\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\n\r\n/** @private */\r\nexport class AccessTokenHttpClient extends HttpClient {\r\n    private _innerClient: HttpClient;\r\n    _accessToken: string | undefined;\r\n    _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n\r\n    constructor(innerClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined) {\r\n        super();\r\n\r\n        this._innerClient = innerClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n    }\r\n\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        let allowRetry = true;\r\n        if (this._accessTokenFactory && (!this._accessToken || (request.url && request.url.indexOf(\"/negotiate?\") > 0))) {\r\n            // don't retry if the request is a negotiate or if we just got a potentially new token from the access token factory\r\n            allowRetry = false;\r\n            this._accessToken = await this._accessTokenFactory();\r\n        }\r\n        this._setAuthorizationHeader(request);\r\n        const response = await this._innerClient.send(request);\r\n\r\n        if (allowRetry && response.statusCode === 401 && this._accessTokenFactory) {\r\n            this._accessToken = await this._accessTokenFactory();\r\n            this._setAuthorizationHeader(request);\r\n            return await this._innerClient.send(request);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    private _setAuthorizationHeader(request: HttpRequest) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (this._accessToken) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${this._accessToken}`\r\n        }\r\n        // don't remove the header if there isn't an access token factory, the user manually added the header in this case\r\n        else if (this._accessTokenFactory) {\r\n            if (request.headers[HeaderNames.Authorization]) {\r\n                delete request.headers[HeaderNames.Authorization];\r\n            }\r\n        }\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._innerClient.getCookieString(url);\r\n    }\r\n}","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpTransportType } from \"./ITransport\";\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occurred on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occurred on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occurred on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message: string) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when multiple errors have occurred. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The collection of errors this error is aggregating. */\r\n    public innerErrors: Error[];\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message: string, innerErrors: Error[]) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n\r\n        this.innerErrors = innerErrors;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\n\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    public static isNotEmpty(val: string, name: string): void {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n    // react-native has a window but no document so we should check both\r\n    public static get isBrowser(): boolean {\r\n        return typeof window === \"object\" && typeof window.document === \"object\";\r\n    }\r\n\r\n    // WebWorkers don't have a window object so the isBrowser check would fail\r\n    public static get isWebWorker(): boolean {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    // react-native has a window but no document\r\n    static get isReactNative(): boolean {\r\n        return typeof window === \"object\" && typeof window.document === \"undefined\";\r\n    }\r\n\r\n    // Node apps shouldn't have a window object, but WebWorkers don't either\r\n    // so we need to check for both WebWorker and window\r\n    public static get isNode(): boolean {\r\n        return !this.isBrowser && !this.isWebWorker && !this.isReactNative;\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string,\r\n                                  content: string | ArrayBuffer, options: IHttpConnectionOptions): Promise<void> {\r\n    const headers: {[k: string]: string} = {};\r\n\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent!)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers},\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel): ILogger {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log !== undefined) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private _subject: Subject<T>;\r\n    private _observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly _minLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public out: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getUserAgentHeader(): [string, string] {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [ userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion()) ];\r\n}\r\n\r\n/** @private */\r\nexport function constructUserAgent(version: string, os: string, runtime: string, runtimeVersion: string | undefined): string {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent: string = \"Microsoft SignalR/\";\r\n\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    } else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n\r\n    userAgent += `${runtime}`;\r\n\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    } else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName(): string {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion(): string | undefined {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getRuntime(): string {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    } else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getErrorString(e: any): string {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    } else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n\r\n/** @private */\r\nexport function getGlobalThis(): unknown {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport { CookieJar } from \"@types/tough-cookie\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis, isArrayBuffer } from \"./Utils\";\r\n\r\nexport class FetchHttpClient extends HttpClient {\r\n    private readonly _abortControllerType: { prototype: AbortController, new(): AbortController };\r\n    private readonly _fetchType: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n    private readonly _jar?: CookieJar;\r\n\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n\r\n        if (typeof fetch === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            this._fetchType = requireFunc(\"node-fetch\");\r\n\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n        } else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n        if (typeof AbortController === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        } else {\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n\r\n        const abortController = new this._abortControllerType();\r\n\r\n        let error: any;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId: any = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout!;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n\r\n        if (request.content === \"\") {\r\n            request.content = undefined;\r\n        }\r\n        if (request.content) {\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            request.headers = request.headers || {};\r\n            if (isArrayBuffer(request.content)) {\r\n                request.headers[\"Content-Type\"] = \"application/octet-stream\";\r\n            } else {\r\n                request.headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\r\n            }\r\n        }\r\n\r\n        let response: Response;\r\n        try {\r\n            response = await this._fetchType(request.url!, {\r\n                body: request.content,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method!,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        } catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(\r\n                LogLevel.Warning,\r\n                `Error from HTTP request. ${e}.`,\r\n            );\r\n            throw e;\r\n        } finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\") as string;\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n\r\n        return new HttpResponse(\r\n            response.status,\r\n            response.statusText,\r\n            payload,\r\n        );\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        let cookies: string = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\n\r\nfunction deserializeContent(response: Response, responseType?: XMLHttpRequestResponseType): Promise<string | ArrayBuffer> {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n\r\n    return content;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            if (request.content === \"\") {\r\n                request.content = undefined;\r\n            }\r\n            if (request.content) {\r\n                // Explicitly setting the Content-Type header for React Native on Android platform.\r\n                if (isArrayBuffer(request.content)) {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\r\n                } else {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n                }\r\n            }\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content);\r\n        });\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly _httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this._httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private _isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort(): void {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this._isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private readonly _pollAbort: AbortController;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted(): boolean {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, logger: ILogger, options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent!)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, data, this._options);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers: {[k: string]: string} = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            await this._httpClient.delete(this._url!, deleteOptions);\r\n\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessToken: string | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private _eventSource?: EventSource;\r\n    private _url?: string;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessToken: string | undefined, logger: ILogger,\r\n                options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._accessToken = accessToken;\r\n        this._logger = logger;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this._url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n\r\n        if (this._accessToken) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(this._accessToken)}`;\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers: MessageHeaders = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers} } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent!)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e: Event) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    } else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url!, data, this._options);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(e?: Error) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly _logger: ILogger;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _webSocketConstructor: WebSocketConstructor;\r\n    private readonly _httpClient: HttpClient;\r\n    private _webSocket?: WebSocket;\r\n    private _headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor, headers: MessageHeaders) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        let token: string;\r\n        if (this._accessTokenFactory) {\r\n            token = await this._accessTokenFactory();\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode || Platform.isReactNative) {\r\n                const headers: {[k: string]: string} = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                if (token) {\r\n                    headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n                }\r\n\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = cookies;\r\n                }\r\n\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n            else\r\n            {\r\n                if (token) {\r\n                    url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n                }\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (_event: Event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the endpoint may not be a SignalR endpoint,\"\r\n                        + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(event?: CloseEvent | Error): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => {};\r\n            this._webSocket.onmessage = () => {};\r\n            this._webSocket.onerror = () => {};\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: (keyof typeof TransferFormat)[];\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private _connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private readonly _httpClient: AccessTokenHttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    // Needs to not start with _ to be available for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private transport?: ITransport;\r\n    private _startInternalPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _stopPromiseResolver: (value?: PromiseLike<void>) => void = () => {};\r\n    private _stopError?: Error;\r\n    private _accessTokenFactory?: () => string | Promise<string>;\r\n    private _sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly _negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\r\n        this._connectionState = ConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this._connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Connecting;\r\n\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n\r\n            return Promise.reject(new AbortError(message));\r\n        } else if (this._connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n\r\n        this._connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this._connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Disconnecting;\r\n\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n\r\n    private async _stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n\r\n        try {\r\n            await this._startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n\r\n    private async _startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        this._httpClient._accessTokenFactory = this._accessTokenFactory;\r\n\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === ConnectionState.Disconnecting || this._connectionState === ConnectionState.Disconnected) {\r\n                        throw new AbortError(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                        // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\r\n                        this._httpClient._accessToken = accessToken;\r\n                        this._httpClient._accessTokenFactory = undefined;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this._connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers: {[k: string]: string} = {};\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n\r\n    private _createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async _createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            } else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n\r\n                    if (this._connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new AbortError(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private _constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent!, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private _startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this._stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private _resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    } else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private _stopConnection(error?: Error): void {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Connecting) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this._connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private _resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private _buffer: any[] = [];\r\n    private _sendBufferedData: PromiseSource;\r\n    private _executing: boolean = true;\r\n    private _transportResult?: PromiseSource;\r\n    private _sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly _transport: ITransport) {\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n\r\n    private _bufferData(data: string | ArrayBuffer): void {\r\n        if (this._buffer.length && typeof(this._buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this._buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n\r\n    private async _sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this._sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this._transportResult!;\r\n            this._transportResult = undefined;\r\n\r\n            const data = typeof(this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n\r\n            this._buffer.length = 0;\r\n\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private _resolver?: () => void;\r\n    private _rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this._resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this._rejecter!(reason);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage: HandshakeResponseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer} input A string or ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: IStreamSubscriber<T>[];\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { AbortError } from \"./Errors\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly _cachedPingMessage: string | ArrayBuffer;\r\n    // Needs to not start with _ for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private readonly connection: IConnection;\r\n    private readonly _logger: ILogger;\r\n    private readonly _reconnectPolicy?: IRetryPolicy;\r\n    private _protocol: IHubProtocol;\r\n    private _handshakeProtocol: HandshakeProtocol;\r\n    private _callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private _methods: { [name: string]: (((...args: any[]) => void) | ((...args: any[]) => any))[] };\r\n    private _invocationId: number;\r\n\r\n    private _closedCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectingCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectedCallbacks: ((connectionId?: string) => void)[];\r\n\r\n    private _receivedHandshakeResponse: boolean;\r\n    private _handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private _handshakeRejecter!: (reason?: any) => void;\r\n    private _stopDuringStartError?: Error;\r\n\r\n    private _connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private _startPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _nextKeepAlive: number = 0;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private _reconnectDelayHandle?: any;\r\n    private _timeoutHandle?: any;\r\n    private _pingServerHandle?: any;\r\n\r\n    private _freezeEventListener = () =>\r\n    {\r\n        this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n    };\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     * The ping will happen at most as often as the server pings.\r\n     * If the server pings every 5 seconds, a value lower than 5 will ping every 5 seconds.\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this._processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this._connectionClosed(error);\r\n\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n\r\n    private async _startWithStateTransitions(): Promise<void> {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this._startInternal();\r\n\r\n            if (Platform.isBrowser) {\r\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this._protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n\r\n            if (!this.connection.features.inherentKeepAlive) {\r\n                await this._sendMessage(this._cachedPingMessage);\r\n            }\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private _stopInternal(error?: Error): Promise<void> {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise!;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new AbortError(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue: Promise<void>;\r\n\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this._launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private _sendMessage(message: any) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private _sendWithProtocol(message: any) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n\r\n        this._launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this._callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => any): void\r\n    public on(methodName: string, newMethod: (...args: any[]) => void): void {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this._methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void): void {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private _processIncomingData(data: any) {\r\n        this._cleanupTimeout();\r\n\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            } catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._resetTimeoutPeriod();\r\n    }\r\n\r\n    private _processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n\r\n        this._cleanupPingTimer();\r\n    }\r\n\r\n    private _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined)\r\n            {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        } catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private async _invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methodName = invocationMessage.target.toLowerCase();\r\n        const methods = this._methods[methodName];\r\n        if (!methods) {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${methodName}' found.`);\r\n\r\n            // No handlers provided by client but the server is expecting a response still, so we send an error\r\n            if (invocationMessage.invocationId) {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                await this._sendWithProtocol(this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null));\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Avoid issues with handlers removing themselves thus modifying the list while iterating through it\r\n        const methodsCopy = methods.slice();\r\n\r\n        // Server expects a response\r\n        const expectsResponse = invocationMessage.invocationId ? true : false;\r\n        // We preserve the last result or exception but still call all handlers\r\n        let res;\r\n        let exception;\r\n        let completionMessage;\r\n        for (const m of methodsCopy) {\r\n            try {\r\n                const prevRes = res;\r\n                res = await m.apply(this, invocationMessage.arguments);\r\n                if (expectsResponse && res && prevRes) {\r\n                    this._logger.log(LogLevel.Error, `Multiple results provided for '${methodName}'. Sending error to server.`);\r\n                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, `Client provided multiple results.`, null);\r\n                }\r\n                // Ignore exception if we got a result after, the exception will be logged\r\n                exception = undefined;\r\n            } catch (e) {\r\n                exception = e;\r\n                this._logger.log(LogLevel.Error, `A callback for the method '${methodName}' threw error '${e}'.`);\r\n            }\r\n        }\r\n        if (completionMessage) {\r\n            await this._sendWithProtocol(completionMessage);\r\n        } else if (expectsResponse) {\r\n            // If there is an exception that means either no result was given or a handler after a result threw\r\n            if (exception) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, `${exception}`, null);\r\n            } else if (res !== undefined) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, null, res);\r\n            } else {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                // Client didn't provide a result or throw from a handler, server expects a response so we send an error\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, \"Client didn't provide a result.\", null);\r\n            }\r\n            await this._sendWithProtocol(completionMessage);\r\n        } else {\r\n            if (res) {\r\n                this._logger.log(LogLevel.Error, `Result given for '${methodName}' method but server is not expecting a result.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _connectionClosed(error?: Error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new AbortError(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private _completeClose(error?: Error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n\r\n            if (Platform.isBrowser) {\r\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this._startInternal();\r\n\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this._completeClose();\r\n    }\r\n\r\n    private _getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this._reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                try {\r\n                    callback(null, error);\r\n                } catch (e) {\r\n                    this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n                }\r\n            });\r\n    }\r\n\r\n    private _cleanupPingTimer(): void {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n\r\n    private _cleanupTimeout(): void {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private _createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _launchStreams(streams: IStreamResult<any>[], promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private _replaceStreamingParams(args: any[]): [IStreamResult<any>[], string[]] {\r\n        const streams: IStreamResult<any>[] = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private _isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private _createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private _createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private _createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private _createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private _isInvocationMessage(message: InvocationMessage): void {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private _isStreamItemMessage(message: StreamItemMessage): void {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private _isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private _assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\nconst LogLevelNameMapping: {[k: string]: LogLevel} = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","import { createContext } from 'react';\nconst RowContext = /*#__PURE__*/createContext({});\nexport default RowContext;","var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport RowContext from './RowContext';\nimport { useColStyle } from './style';\nfunction parseFlex(flex) {\n  if (typeof flex === 'number') {\n    return `${flex} ${flex} auto`;\n  }\n  if (/^\\d+(\\.\\d+)?(px|em|rem|%)$/.test(flex)) {\n    return `0 0 ${flex}`;\n  }\n  return flex;\n}\nconst sizes = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];\nconst Col = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const {\n    gutter,\n    wrap,\n    supportFlexGap\n  } = React.useContext(RowContext);\n  const {\n      prefixCls: customizePrefixCls,\n      span,\n      order,\n      offset,\n      push,\n      pull,\n      className,\n      children,\n      flex,\n      style\n    } = props,\n    others = __rest(props, [\"prefixCls\", \"span\", \"order\", \"offset\", \"push\", \"pull\", \"className\", \"children\", \"flex\", \"style\"]);\n  const prefixCls = getPrefixCls('col', customizePrefixCls);\n  const [wrapSSR, hashId] = useColStyle(prefixCls);\n  let sizeClassObj = {};\n  sizes.forEach(size => {\n    let sizeProps = {};\n    const propSize = props[size];\n    if (typeof propSize === 'number') {\n      sizeProps.span = propSize;\n    } else if (typeof propSize === 'object') {\n      sizeProps = propSize || {};\n    }\n    delete others[size];\n    sizeClassObj = Object.assign(Object.assign({}, sizeClassObj), {\n      [`${prefixCls}-${size}-${sizeProps.span}`]: sizeProps.span !== undefined,\n      [`${prefixCls}-${size}-order-${sizeProps.order}`]: sizeProps.order || sizeProps.order === 0,\n      [`${prefixCls}-${size}-offset-${sizeProps.offset}`]: sizeProps.offset || sizeProps.offset === 0,\n      [`${prefixCls}-${size}-push-${sizeProps.push}`]: sizeProps.push || sizeProps.push === 0,\n      [`${prefixCls}-${size}-pull-${sizeProps.pull}`]: sizeProps.pull || sizeProps.pull === 0,\n      [`${prefixCls}-${size}-flex-${sizeProps.flex}`]: sizeProps.flex || sizeProps.flex === 'auto',\n      [`${prefixCls}-rtl`]: direction === 'rtl'\n    });\n  });\n  const classes = classNames(prefixCls, {\n    [`${prefixCls}-${span}`]: span !== undefined,\n    [`${prefixCls}-order-${order}`]: order,\n    [`${prefixCls}-offset-${offset}`]: offset,\n    [`${prefixCls}-push-${push}`]: push,\n    [`${prefixCls}-pull-${pull}`]: pull\n  }, className, sizeClassObj, hashId);\n  const mergedStyle = {};\n  // Horizontal gutter use padding\n  if (gutter && gutter[0] > 0) {\n    const horizontalGutter = gutter[0] / 2;\n    mergedStyle.paddingLeft = horizontalGutter;\n    mergedStyle.paddingRight = horizontalGutter;\n  }\n  // Vertical gutter use padding when gap not support\n  if (gutter && gutter[1] > 0 && !supportFlexGap) {\n    const verticalGutter = gutter[1] / 2;\n    mergedStyle.paddingTop = verticalGutter;\n    mergedStyle.paddingBottom = verticalGutter;\n  }\n  if (flex) {\n    mergedStyle.flex = parseFlex(flex);\n    // Hack for Firefox to avoid size issue\n    // https://github.com/ant-design/ant-design/pull/20023#issuecomment-564389553\n    if (wrap === false && !mergedStyle.minWidth) {\n      mergedStyle.minWidth = 0;\n    }\n  }\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", Object.assign({}, others, {\n    style: Object.assign(Object.assign({}, mergedStyle), style),\n    className: classes,\n    ref: ref\n  }), children));\n});\nif (process.env.NODE_ENV !== 'production') {\n  Col.displayName = 'Col';\n}\nexport default Col;","var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport useFlexGapSupport from '../_util/hooks/useFlexGapSupport';\nimport useResponsiveObserver, { responsiveArray } from '../_util/responsiveObserver';\nimport RowContext from './RowContext';\nimport { useRowStyle } from './style';\nconst RowAligns = ['top', 'middle', 'bottom', 'stretch'];\nconst RowJustify = ['start', 'end', 'center', 'space-around', 'space-between', 'space-evenly'];\nfunction useMergePropByScreen(oriProp, screen) {\n  const [prop, setProp] = React.useState(typeof oriProp === 'string' ? oriProp : '');\n  const calcMergeAlignOrJustify = () => {\n    if (typeof oriProp === 'string') {\n      setProp(oriProp);\n    }\n    if (typeof oriProp !== 'object') {\n      return;\n    }\n    for (let i = 0; i < responsiveArray.length; i++) {\n      const breakpoint = responsiveArray[i];\n      // if do not match, do nothing\n      if (!screen[breakpoint]) continue;\n      const curVal = oriProp[breakpoint];\n      if (curVal !== undefined) {\n        setProp(curVal);\n        return;\n      }\n    }\n  };\n  React.useEffect(() => {\n    calcMergeAlignOrJustify();\n  }, [JSON.stringify(oriProp), screen]);\n  return prop;\n}\nconst Row = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n      prefixCls: customizePrefixCls,\n      justify,\n      align,\n      className,\n      style,\n      children,\n      gutter = 0,\n      wrap\n    } = props,\n    others = __rest(props, [\"prefixCls\", \"justify\", \"align\", \"className\", \"style\", \"children\", \"gutter\", \"wrap\"]);\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const [screens, setScreens] = React.useState({\n    xs: true,\n    sm: true,\n    md: true,\n    lg: true,\n    xl: true,\n    xxl: true\n  });\n  // to save screens info when responsiveObserve callback had been call\n  const [curScreens, setCurScreens] = React.useState({\n    xs: false,\n    sm: false,\n    md: false,\n    lg: false,\n    xl: false,\n    xxl: false\n  });\n  // ================================== calc responsive data ==================================\n  const mergeAlign = useMergePropByScreen(align, curScreens);\n  const mergeJustify = useMergePropByScreen(justify, curScreens);\n  const supportFlexGap = useFlexGapSupport();\n  const gutterRef = React.useRef(gutter);\n  const responsiveObserver = useResponsiveObserver();\n  // ================================== Effect ==================================\n  React.useEffect(() => {\n    const token = responsiveObserver.subscribe(screen => {\n      setCurScreens(screen);\n      const currentGutter = gutterRef.current || 0;\n      if (!Array.isArray(currentGutter) && typeof currentGutter === 'object' || Array.isArray(currentGutter) && (typeof currentGutter[0] === 'object' || typeof currentGutter[1] === 'object')) {\n        setScreens(screen);\n      }\n    });\n    return () => responsiveObserver.unsubscribe(token);\n  }, []);\n  // ================================== Render ==================================\n  const getGutter = () => {\n    const results = [undefined, undefined];\n    const normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, undefined];\n    normalizedGutter.forEach((g, index) => {\n      if (typeof g === 'object') {\n        for (let i = 0; i < responsiveArray.length; i++) {\n          const breakpoint = responsiveArray[i];\n          if (screens[breakpoint] && g[breakpoint] !== undefined) {\n            results[index] = g[breakpoint];\n            break;\n          }\n        }\n      } else {\n        results[index] = g;\n      }\n    });\n    return results;\n  };\n  const prefixCls = getPrefixCls('row', customizePrefixCls);\n  const [wrapSSR, hashId] = useRowStyle(prefixCls);\n  const gutters = getGutter();\n  const classes = classNames(prefixCls, {\n    [`${prefixCls}-no-wrap`]: wrap === false,\n    [`${prefixCls}-${mergeJustify}`]: mergeJustify,\n    [`${prefixCls}-${mergeAlign}`]: mergeAlign,\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, className, hashId);\n  // Add gutter related style\n  const rowStyle = {};\n  const horizontalGutter = gutters[0] != null && gutters[0] > 0 ? gutters[0] / -2 : undefined;\n  const verticalGutter = gutters[1] != null && gutters[1] > 0 ? gutters[1] / -2 : undefined;\n  if (horizontalGutter) {\n    rowStyle.marginLeft = horizontalGutter;\n    rowStyle.marginRight = horizontalGutter;\n  }\n  if (supportFlexGap) {\n    // Set gap direct if flex gap support\n    [, rowStyle.rowGap] = gutters;\n  } else if (verticalGutter) {\n    rowStyle.marginTop = verticalGutter;\n    rowStyle.marginBottom = verticalGutter;\n  }\n  // \"gutters\" is a new array in each rendering phase, it'll make 'React.useMemo' effectless.\n  // So we deconstruct \"gutters\" variable here.\n  const [gutterH, gutterV] = gutters;\n  const rowContext = React.useMemo(() => ({\n    gutter: [gutterH, gutterV],\n    wrap,\n    supportFlexGap\n  }), [gutterH, gutterV, wrap, supportFlexGap]);\n  return wrapSSR( /*#__PURE__*/React.createElement(RowContext.Provider, {\n    value: rowContext\n  }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, others, {\n    className: classes,\n    style: Object.assign(Object.assign({}, rowStyle), style),\n    ref: ref\n  }), children)));\n});\nif (process.env.NODE_ENV !== 'production') {\n  Row.displayName = 'Row';\n}\nexport default Row;","import { genComponentStyleHook, mergeToken } from '../../theme/internal';\n// ============================== Row-Shared ==============================\nconst genGridRowStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    // Grid system\n    [componentCls]: {\n      display: 'flex',\n      flexFlow: 'row wrap',\n      minWidth: 0,\n      '&::before, &::after': {\n        display: 'flex'\n      },\n      '&-no-wrap': {\n        flexWrap: 'nowrap'\n      },\n      // The origin of the X-axis\n      '&-start': {\n        justifyContent: 'flex-start'\n      },\n      // The center of the X-axis\n      '&-center': {\n        justifyContent: 'center'\n      },\n      // The opposite of the X-axis\n      '&-end': {\n        justifyContent: 'flex-end'\n      },\n      '&-space-between': {\n        justifyContent: 'space-between'\n      },\n      '&-space-around': {\n        justifyContent: 'space-around'\n      },\n      '&-space-evenly': {\n        justifyContent: 'space-evenly'\n      },\n      // Align at the top\n      '&-top': {\n        alignItems: 'flex-start'\n      },\n      // Align at the center\n      '&-middle': {\n        alignItems: 'center'\n      },\n      '&-bottom': {\n        alignItems: 'flex-end'\n      }\n    }\n  };\n};\n// ============================== Col-Shared ==============================\nconst genGridColStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    // Grid system\n    [componentCls]: {\n      position: 'relative',\n      maxWidth: '100%',\n      // Prevent columns from collapsing when empty\n      minHeight: 1\n    }\n  };\n};\nconst genLoopGridColumnsStyle = (token, sizeCls) => {\n  const {\n    componentCls,\n    gridColumns\n  } = token;\n  const gridColumnsStyle = {};\n  for (let i = gridColumns; i >= 0; i--) {\n    if (i === 0) {\n      gridColumnsStyle[`${componentCls}${sizeCls}-${i}`] = {\n        display: 'none'\n      };\n      gridColumnsStyle[`${componentCls}-push-${i}`] = {\n        insetInlineStart: 'auto'\n      };\n      gridColumnsStyle[`${componentCls}-pull-${i}`] = {\n        insetInlineEnd: 'auto'\n      };\n      gridColumnsStyle[`${componentCls}${sizeCls}-push-${i}`] = {\n        insetInlineStart: 'auto'\n      };\n      gridColumnsStyle[`${componentCls}${sizeCls}-pull-${i}`] = {\n        insetInlineEnd: 'auto'\n      };\n      gridColumnsStyle[`${componentCls}${sizeCls}-offset-${i}`] = {\n        marginInlineStart: 0\n      };\n      gridColumnsStyle[`${componentCls}${sizeCls}-order-${i}`] = {\n        order: 0\n      };\n    } else {\n      gridColumnsStyle[`${componentCls}${sizeCls}-${i}`] = {\n        display: 'block',\n        flex: `0 0 ${i / gridColumns * 100}%`,\n        maxWidth: `${i / gridColumns * 100}%`\n      };\n      gridColumnsStyle[`${componentCls}${sizeCls}-push-${i}`] = {\n        insetInlineStart: `${i / gridColumns * 100}%`\n      };\n      gridColumnsStyle[`${componentCls}${sizeCls}-pull-${i}`] = {\n        insetInlineEnd: `${i / gridColumns * 100}%`\n      };\n      gridColumnsStyle[`${componentCls}${sizeCls}-offset-${i}`] = {\n        marginInlineStart: `${i / gridColumns * 100}%`\n      };\n      gridColumnsStyle[`${componentCls}${sizeCls}-order-${i}`] = {\n        order: i\n      };\n    }\n  }\n  return gridColumnsStyle;\n};\nconst genGridStyle = (token, sizeCls) => genLoopGridColumnsStyle(token, sizeCls);\nconst genGridMediaStyle = (token, screenSize, sizeCls) => ({\n  [`@media (min-width: ${screenSize}px)`]: Object.assign({}, genGridStyle(token, sizeCls))\n});\n// ============================== Export ==============================\nexport const useRowStyle = genComponentStyleHook('Grid', token => [genGridRowStyle(token)]);\nexport const useColStyle = genComponentStyleHook('Grid', token => {\n  const gridToken = mergeToken(token, {\n    gridColumns: 24 // Row is divided into 24 parts in Grid\n  });\n\n  const gridMediaSizesMap = {\n    '-sm': gridToken.screenSMMin,\n    '-md': gridToken.screenMDMin,\n    '-lg': gridToken.screenLGMin,\n    '-xl': gridToken.screenXLMin,\n    '-xxl': gridToken.screenXXLMin\n  };\n  return [genGridColStyle(gridToken), genGridStyle(gridToken, ''), genGridStyle(gridToken, '-xs'), Object.keys(gridMediaSizesMap).map(key => genGridMediaStyle(gridToken, gridMediaSizesMap[key], key)).reduce((pre, cur) => Object.assign(Object.assign({}, pre), cur), {})];\n});","var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport classNames from 'classnames';\nimport React, { Children, forwardRef, useContext } from 'react';\nimport { ConfigContext } from '../config-provider';\nimport { Col } from '../grid';\nimport { cloneElement } from '../_util/reactNode';\nimport { ListContext } from './index';\nexport const Meta = _a => {\n  var {\n      prefixCls: customizePrefixCls,\n      className,\n      avatar,\n      title,\n      description\n    } = _a,\n    others = __rest(_a, [\"prefixCls\", \"className\", \"avatar\", \"title\", \"description\"]);\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = getPrefixCls('list', customizePrefixCls);\n  const classString = classNames(`${prefixCls}-item-meta`, className);\n  const content = /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-item-meta-content`\n  }, title && /*#__PURE__*/React.createElement(\"h4\", {\n    className: `${prefixCls}-item-meta-title`\n  }, title), description && /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-item-meta-description`\n  }, description));\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, others, {\n    className: classString\n  }), avatar && /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-item-meta-avatar`\n  }, avatar), (title || description) && content);\n};\nconst InternalItem = (_a, ref) => {\n  var {\n      prefixCls: customizePrefixCls,\n      children,\n      actions,\n      extra,\n      className,\n      colStyle\n    } = _a,\n    others = __rest(_a, [\"prefixCls\", \"children\", \"actions\", \"extra\", \"className\", \"colStyle\"]);\n  const {\n    grid,\n    itemLayout\n  } = useContext(ListContext);\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const isItemContainsTextNodeAndNotSingular = () => {\n    let result;\n    Children.forEach(children, element => {\n      if (typeof element === 'string') {\n        result = true;\n      }\n    });\n    return result && Children.count(children) > 1;\n  };\n  const isFlexMode = () => {\n    if (itemLayout === 'vertical') {\n      return !!extra;\n    }\n    return !isItemContainsTextNodeAndNotSingular();\n  };\n  const prefixCls = getPrefixCls('list', customizePrefixCls);\n  const actionsContent = actions && actions.length > 0 && /*#__PURE__*/React.createElement(\"ul\", {\n    className: `${prefixCls}-item-action`,\n    key: \"actions\"\n  }, actions.map((action, i) =>\n  /*#__PURE__*/\n  // eslint-disable-next-line react/no-array-index-key\n  React.createElement(\"li\", {\n    key: `${prefixCls}-item-action-${i}`\n  }, action, i !== actions.length - 1 && /*#__PURE__*/React.createElement(\"em\", {\n    className: `${prefixCls}-item-action-split`\n  }))));\n  const Element = grid ? 'div' : 'li';\n  const itemChildren = /*#__PURE__*/React.createElement(Element, Object.assign({}, others, !grid ? {\n    ref\n  } : {}, {\n    className: classNames(`${prefixCls}-item`, {\n      [`${prefixCls}-item-no-flex`]: !isFlexMode()\n    }, className)\n  }), itemLayout === 'vertical' && extra ? [/*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-item-main`,\n    key: \"content\"\n  }, children, actionsContent), /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-item-extra`,\n    key: \"extra\"\n  }, extra)] : [children, actionsContent, cloneElement(extra, {\n    key: 'extra'\n  })]);\n  return grid ? /*#__PURE__*/React.createElement(Col, {\n    ref: ref,\n    flex: 1,\n    style: colStyle\n  }, itemChildren) : itemChildren;\n};\nconst Item = /*#__PURE__*/forwardRef(InternalItem);\nItem.Meta = Meta;\nexport default Item;","import { resetComponent } from '../../style';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nconst genBorderedStyle = token => {\n  const {\n    listBorderedCls,\n    componentCls,\n    paddingLG,\n    margin,\n    padding,\n    listItemPaddingSM,\n    marginLG,\n    borderRadiusLG\n  } = token;\n  return {\n    [`${listBorderedCls}`]: {\n      border: `${token.lineWidth}px ${token.lineType} ${token.colorBorder}`,\n      borderRadius: borderRadiusLG,\n      [`${componentCls}-header,${componentCls}-footer,${componentCls}-item`]: {\n        paddingInline: paddingLG\n      },\n      [`${componentCls}-pagination`]: {\n        margin: `${margin}px ${marginLG}px`\n      }\n    },\n    [`${listBorderedCls}${componentCls}-sm`]: {\n      [`${componentCls}-item,${componentCls}-header,${componentCls}-footer`]: {\n        padding: listItemPaddingSM\n      }\n    },\n    [`${listBorderedCls}${componentCls}-lg`]: {\n      [`${componentCls}-item,${componentCls}-header,${componentCls}-footer`]: {\n        padding: `${padding}px ${paddingLG}px`\n      }\n    }\n  };\n};\nconst genResponsiveStyle = token => {\n  const {\n    componentCls,\n    screenSM,\n    screenMD,\n    marginLG,\n    marginSM,\n    margin\n  } = token;\n  return {\n    [`@media screen and (max-width:${screenMD})`]: {\n      [`${componentCls}`]: {\n        [`${componentCls}-item`]: {\n          [`${componentCls}-item-action`]: {\n            marginInlineStart: marginLG\n          }\n        }\n      },\n      [`${componentCls}-vertical`]: {\n        [`${componentCls}-item`]: {\n          [`${componentCls}-item-extra`]: {\n            marginInlineStart: marginLG\n          }\n        }\n      }\n    },\n    [`@media screen and (max-width: ${screenSM})`]: {\n      [`${componentCls}`]: {\n        [`${componentCls}-item`]: {\n          flexWrap: 'wrap',\n          [`${componentCls}-action`]: {\n            marginInlineStart: marginSM\n          }\n        }\n      },\n      [`${componentCls}-vertical`]: {\n        [`${componentCls}-item`]: {\n          flexWrap: 'wrap-reverse',\n          [`${componentCls}-item-main`]: {\n            minWidth: token.contentWidth\n          },\n          [`${componentCls}-item-extra`]: {\n            margin: `auto auto ${margin}px`\n          }\n        }\n      }\n    }\n  };\n};\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    antCls,\n    controlHeight,\n    minHeight,\n    paddingSM,\n    marginLG,\n    padding,\n    listItemPadding,\n    colorPrimary,\n    listItemPaddingSM,\n    listItemPaddingLG,\n    paddingXS,\n    margin,\n    colorText,\n    colorTextDescription,\n    motionDurationSlow,\n    lineWidth\n  } = token;\n  const alignCls = {};\n  ['start', 'center', 'end'].forEach(item => {\n    alignCls[`&-align-${item}`] = {\n      textAlign: item\n    };\n  });\n  return {\n    [`${componentCls}`]: Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      '*': {\n        outline: 'none'\n      },\n      [`${componentCls}-header, ${componentCls}-footer`]: {\n        background: 'transparent',\n        paddingBlock: paddingSM\n      },\n      [`${componentCls}-pagination`]: Object.assign(Object.assign({\n        marginBlockStart: marginLG\n      }, alignCls), {\n        // https://github.com/ant-design/ant-design/issues/20037\n        [`${antCls}-pagination-options`]: {\n          textAlign: 'start'\n        }\n      }),\n      [`${componentCls}-spin`]: {\n        minHeight,\n        textAlign: 'center'\n      },\n      [`${componentCls}-items`]: {\n        margin: 0,\n        padding: 0,\n        listStyle: 'none'\n      },\n      [`${componentCls}-item`]: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        padding: listItemPadding,\n        color: colorText,\n        [`${componentCls}-item-meta`]: {\n          display: 'flex',\n          flex: 1,\n          alignItems: 'flex-start',\n          maxWidth: '100%',\n          [`${componentCls}-item-meta-avatar`]: {\n            marginInlineEnd: padding\n          },\n          [`${componentCls}-item-meta-content`]: {\n            flex: '1 0',\n            width: 0,\n            color: colorText\n          },\n          [`${componentCls}-item-meta-title`]: {\n            margin: `0 0 ${token.marginXXS}px 0`,\n            color: colorText,\n            fontSize: token.fontSize,\n            lineHeight: token.lineHeight,\n            '> a': {\n              color: colorText,\n              transition: `all ${motionDurationSlow}`,\n              [`&:hover`]: {\n                color: colorPrimary\n              }\n            }\n          },\n          [`${componentCls}-item-meta-description`]: {\n            color: colorTextDescription,\n            fontSize: token.fontSize,\n            lineHeight: token.lineHeight\n          }\n        },\n        [`${componentCls}-item-action`]: {\n          flex: '0 0 auto',\n          marginInlineStart: token.marginXXL,\n          padding: 0,\n          fontSize: 0,\n          listStyle: 'none',\n          [`& > li`]: {\n            position: 'relative',\n            display: 'inline-block',\n            padding: `0 ${paddingXS}px`,\n            color: colorTextDescription,\n            fontSize: token.fontSize,\n            lineHeight: token.lineHeight,\n            textAlign: 'center',\n            [`&:first-child`]: {\n              paddingInlineStart: 0\n            }\n          },\n          [`${componentCls}-item-action-split`]: {\n            position: 'absolute',\n            insetBlockStart: '50%',\n            insetInlineEnd: 0,\n            width: lineWidth,\n            height: Math.ceil(token.fontSize * token.lineHeight) - token.marginXXS * 2,\n            transform: 'translateY(-50%)',\n            backgroundColor: token.colorSplit\n          }\n        }\n      },\n      [`${componentCls}-empty`]: {\n        padding: `${padding}px 0`,\n        color: colorTextDescription,\n        fontSize: token.fontSizeSM,\n        textAlign: 'center'\n      },\n      [`${componentCls}-empty-text`]: {\n        padding,\n        color: token.colorTextDisabled,\n        fontSize: token.fontSize,\n        textAlign: 'center'\n      },\n      // ============================ without flex ============================\n      [`${componentCls}-item-no-flex`]: {\n        display: 'block'\n      }\n    }),\n    [`${componentCls}-grid ${antCls}-col > ${componentCls}-item`]: {\n      display: 'block',\n      maxWidth: '100%',\n      marginBlockEnd: margin,\n      paddingBlock: 0,\n      borderBlockEnd: 'none'\n    },\n    [`${componentCls}-vertical ${componentCls}-item`]: {\n      alignItems: 'initial',\n      [`${componentCls}-item-main`]: {\n        display: 'block',\n        flex: 1\n      },\n      [`${componentCls}-item-extra`]: {\n        marginInlineStart: marginLG\n      },\n      [`${componentCls}-item-meta`]: {\n        marginBlockEnd: padding,\n        [`${componentCls}-item-meta-title`]: {\n          marginBlockStart: 0,\n          marginBlockEnd: paddingSM,\n          color: colorText,\n          fontSize: token.fontSizeLG,\n          lineHeight: token.lineHeightLG\n        }\n      },\n      [`${componentCls}-item-action`]: {\n        marginBlockStart: padding,\n        marginInlineStart: 'auto',\n        '> li': {\n          padding: `0 ${padding}px`,\n          [`&:first-child`]: {\n            paddingInlineStart: 0\n          }\n        }\n      }\n    },\n    [`${componentCls}-split ${componentCls}-item`]: {\n      borderBlockEnd: `${token.lineWidth}px ${token.lineType} ${token.colorSplit}`,\n      [`&:last-child`]: {\n        borderBlockEnd: 'none'\n      }\n    },\n    [`${componentCls}-split ${componentCls}-header`]: {\n      borderBlockEnd: `${token.lineWidth}px ${token.lineType} ${token.colorSplit}`\n    },\n    [`${componentCls}-split${componentCls}-empty ${componentCls}-footer`]: {\n      borderTop: `${token.lineWidth}px ${token.lineType} ${token.colorSplit}`\n    },\n    [`${componentCls}-loading ${componentCls}-spin-nested-loading`]: {\n      minHeight: controlHeight\n    },\n    [`${componentCls}-split${componentCls}-something-after-last-item ${antCls}-spin-container > ${componentCls}-items > ${componentCls}-item:last-child`]: {\n      borderBlockEnd: `${token.lineWidth}px ${token.lineType} ${token.colorSplit}`\n    },\n    [`${componentCls}-lg ${componentCls}-item`]: {\n      padding: listItemPaddingLG\n    },\n    [`${componentCls}-sm ${componentCls}-item`]: {\n      padding: listItemPaddingSM\n    },\n    // Horizontal\n    [`${componentCls}:not(${componentCls}-vertical)`]: {\n      [`${componentCls}-item-no-flex`]: {\n        [`${componentCls}-item-action`]: {\n          float: 'right'\n        }\n      }\n    }\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('List', token => {\n  const listToken = mergeToken(token, {\n    listBorderedCls: `${token.componentCls}-bordered`,\n    minHeight: token.controlHeightLG,\n    listItemPadding: `${token.paddingContentVertical}px 0`,\n    listItemPaddingSM: `${token.paddingContentVerticalSM}px ${token.paddingContentHorizontal}px`,\n    listItemPaddingLG: `${token.paddingContentVerticalLG}px ${token.paddingContentHorizontalLG}px`\n  });\n  return [genBaseStyle(listToken), genBorderedStyle(listToken), genResponsiveStyle(listToken)];\n}, {\n  contentWidth: 220\n});","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport classNames from 'classnames';\n// eslint-disable-next-line import/no-named-as-default\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport DefaultRenderEmpty from '../config-provider/defaultRenderEmpty';\nimport { Row } from '../grid';\nimport useBreakpoint from '../grid/hooks/useBreakpoint';\nimport Pagination from '../pagination';\nimport Spin from '../spin';\nimport { responsiveArray } from '../_util/responsiveObserver';\nimport extendsObject from '../_util/extendsObject';\nimport Item from './Item';\n// CSSINJS\nimport useStyle from './style';\nexport const ListContext = /*#__PURE__*/React.createContext({});\nexport const ListConsumer = ListContext.Consumer;\nfunction List(_a) {\n  var _b;\n  var {\n      pagination = false,\n      prefixCls: customizePrefixCls,\n      bordered = false,\n      split = true,\n      className,\n      rootClassName,\n      children,\n      itemLayout,\n      loadMore,\n      grid,\n      dataSource = [],\n      size,\n      header,\n      footer,\n      loading = false,\n      rowKey,\n      renderItem,\n      locale\n    } = _a,\n    rest = __rest(_a, [\"pagination\", \"prefixCls\", \"bordered\", \"split\", \"className\", \"rootClassName\", \"children\", \"itemLayout\", \"loadMore\", \"grid\", \"dataSource\", \"size\", \"header\", \"footer\", \"loading\", \"rowKey\", \"renderItem\", \"locale\"]);\n  const paginationObj = pagination && typeof pagination === 'object' ? pagination : {};\n  const [paginationCurrent, setPaginationCurrent] = React.useState(paginationObj.defaultCurrent || 1);\n  const [paginationSize, setPaginationSize] = React.useState(paginationObj.defaultPageSize || 10);\n  const {\n    getPrefixCls,\n    renderEmpty,\n    direction\n  } = React.useContext(ConfigContext);\n  const defaultPaginationProps = {\n    current: 1,\n    total: 0\n  };\n  const triggerPaginationEvent = eventName => (page, pageSize) => {\n    setPaginationCurrent(page);\n    setPaginationSize(pageSize);\n    if (pagination && pagination[eventName]) {\n      pagination[eventName](page, pageSize);\n    }\n  };\n  const onPaginationChange = triggerPaginationEvent('onChange');\n  const onPaginationShowSizeChange = triggerPaginationEvent('onShowSizeChange');\n  const renderInnerItem = (item, index) => {\n    if (!renderItem) return null;\n    let key;\n    if (typeof rowKey === 'function') {\n      key = rowKey(item);\n    } else if (rowKey) {\n      key = item[rowKey];\n    } else {\n      key = item.key;\n    }\n    if (!key) {\n      key = `list-item-${index}`;\n    }\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: key\n    }, renderItem(item, index));\n  };\n  const isSomethingAfterLastItem = () => !!(loadMore || pagination || footer);\n  const prefixCls = getPrefixCls('list', customizePrefixCls);\n  // Style\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  let loadingProp = loading;\n  if (typeof loadingProp === 'boolean') {\n    loadingProp = {\n      spinning: loadingProp\n    };\n  }\n  const isLoading = loadingProp && loadingProp.spinning;\n  // large => lg\n  // small => sm\n  let sizeCls = '';\n  switch (size) {\n    case 'large':\n      sizeCls = 'lg';\n      break;\n    case 'small':\n      sizeCls = 'sm';\n      break;\n    default:\n      break;\n  }\n  const classString = classNames(prefixCls, {\n    [`${prefixCls}-vertical`]: itemLayout === 'vertical',\n    [`${prefixCls}-${sizeCls}`]: sizeCls,\n    [`${prefixCls}-split`]: split,\n    [`${prefixCls}-bordered`]: bordered,\n    [`${prefixCls}-loading`]: isLoading,\n    [`${prefixCls}-grid`]: !!grid,\n    [`${prefixCls}-something-after-last-item`]: isSomethingAfterLastItem(),\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, className, rootClassName, hashId);\n  const paginationProps = extendsObject(defaultPaginationProps, {\n    total: dataSource.length,\n    current: paginationCurrent,\n    pageSize: paginationSize\n  }, pagination || {});\n  const largestPage = Math.ceil(paginationProps.total / paginationProps.pageSize);\n  if (paginationProps.current > largestPage) {\n    paginationProps.current = largestPage;\n  }\n  const paginationContent = pagination ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(`${prefixCls}-pagination`, `${prefixCls}-pagination-align-${(_b = paginationProps === null || paginationProps === void 0 ? void 0 : paginationProps.align) !== null && _b !== void 0 ? _b : 'end'}`)\n  }, /*#__PURE__*/React.createElement(Pagination, Object.assign({}, paginationProps, {\n    onChange: onPaginationChange,\n    onShowSizeChange: onPaginationShowSizeChange\n  }))) : null;\n  let splitDataSource = _toConsumableArray(dataSource);\n  if (pagination) {\n    if (dataSource.length > (paginationProps.current - 1) * paginationProps.pageSize) {\n      splitDataSource = _toConsumableArray(dataSource).splice((paginationProps.current - 1) * paginationProps.pageSize, paginationProps.pageSize);\n    }\n  }\n  const needResponsive = Object.keys(grid || {}).some(key => ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'].includes(key));\n  const screens = useBreakpoint(needResponsive);\n  const currentBreakpoint = React.useMemo(() => {\n    for (let i = 0; i < responsiveArray.length; i += 1) {\n      const breakpoint = responsiveArray[i];\n      if (screens[breakpoint]) {\n        return breakpoint;\n      }\n    }\n    return undefined;\n  }, [screens]);\n  const colStyle = React.useMemo(() => {\n    if (!grid) {\n      return undefined;\n    }\n    const columnCount = currentBreakpoint && grid[currentBreakpoint] ? grid[currentBreakpoint] : grid.column;\n    if (columnCount) {\n      return {\n        width: `${100 / columnCount}%`,\n        maxWidth: `${100 / columnCount}%`\n      };\n    }\n  }, [grid === null || grid === void 0 ? void 0 : grid.column, currentBreakpoint]);\n  let childrenContent = isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      minHeight: 53\n    }\n  });\n  if (splitDataSource.length > 0) {\n    const items = splitDataSource.map((item, index) => renderInnerItem(item, index));\n    childrenContent = grid ? /*#__PURE__*/React.createElement(Row, {\n      gutter: grid.gutter\n    }, React.Children.map(items, child => /*#__PURE__*/React.createElement(\"div\", {\n      key: child === null || child === void 0 ? void 0 : child.key,\n      style: colStyle\n    }, child))) : /*#__PURE__*/React.createElement(\"ul\", {\n      className: `${prefixCls}-items`\n    }, items);\n  } else if (!children && !isLoading) {\n    childrenContent = /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-empty-text`\n    }, locale && locale.emptyText || (renderEmpty === null || renderEmpty === void 0 ? void 0 : renderEmpty('List')) || /*#__PURE__*/React.createElement(DefaultRenderEmpty, {\n      componentName: \"List\"\n    }));\n  }\n  const paginationPosition = paginationProps.position || 'bottom';\n  const contextValue = React.useMemo(() => ({\n    grid,\n    itemLayout\n  }), [JSON.stringify(grid), itemLayout]);\n  return wrapSSR( /*#__PURE__*/React.createElement(ListContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: classString\n  }, rest), (paginationPosition === 'top' || paginationPosition === 'both') && paginationContent, header && /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-header`\n  }, header), /*#__PURE__*/React.createElement(Spin, Object.assign({}, loadingProp), childrenContent, children), footer && /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-footer`\n  }, footer), loadMore || (paginationPosition === 'bottom' || paginationPosition === 'both') && paginationContent)));\n}\nif (process.env.NODE_ENV !== 'production') {\n  List.displayName = 'List';\n}\nList.Item = Item;\nexport default List;"],"names":["DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","retryDelays","_classCallCheck","this","_retryDelays","undefined","concat","_toConsumableArray","_createClass","key","value","retryContext","previousRetryCount","HeaderNames","Authorization","Cookie","HttpResponse","statusCode","statusText","content","HttpClient","url","options","send","_objectSpread","method","AccessTokenHttpClient","_HttpClient","_inherits","_super","_createSuper","innerClient","accessTokenFactory","_this","call","_innerClient","_accessTokenFactory","_send","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","allowRetry","response","wrap","_context","prev","next","_accessToken","indexOf","sent","_setAuthorizationHeader","abrupt","stop","_x","apply","arguments","headers","getCookieString","HttpError","_Error","errorMessage","trueProto","constructor","prototype","__proto__","_wrapNativeSuper","Error","TimeoutError","_Error2","_super2","_this2","length","AbortError","_Error3","_super3","_this3","UnsupportedTransportError","_Error4","_super4","message","transport","_this4","errorType","DisabledTransportError","_Error5","_super5","_this5","FailedToStartTransportError","_Error6","_super6","_this6","FailedToNegotiateWithServerError","_Error7","_super7","_this7","AggregateErrors","_Error8","_super8","innerErrors","_this8","NullLogger","_logLevel","_message","instance","VERSION","Arg","val","name","match","values","Platform","get","window","document","self","isBrowser","isWebWorker","isReactNative","getDataDetail","data","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","forEach","num","toString","substr","formatArrayBuffer","ArrayBuffer","sendMessage","_x2","_x3","_x4","_x5","_x6","_sendMessage","logger","transportName","httpClient","_getUserAgentHeader","_getUserAgentHeader2","responseType","getUserAgentHeader","_slicedToArray","log","LogLevel","logMessageContent","post","timeout","withCredentials","SubjectSubscription","subject","observer","_subject","_observer","index","observers","splice","cancelCallback","catch","_","ConsoleLogger","minimumLogLevel","_minLevel","out","console","logLevel","msg","Date","toISOString","error","warn","info","userAgentHeaderName","isNode","constructUserAgent","getOsName","getRuntime","getRuntimeVersion","version","os","runtime","runtimeVersion","userAgent","majorAndMinor","split","process","platform","versions","node","getErrorString","e","stack","FetchHttpClient","_logger","fetch","requireFunc","__non_webpack_require__","_jar","_fetchType","bind","globalThis","global","getGlobalThis","AbortController","_abortControllerType","abortController","timeoutId","msTimeout","payload","abortSignal","aborted","onabort","abort","setTimeout","body","cache","credentials","mode","redirect","signal","t0","clearTimeout","finish","ok","deserializeContent","status","cookies","getCookies","c","join","arrayBuffer","text","HttpTransportType","TransferFormat","XhrHttpClient","Promise","reject","resolve","xhr","XMLHttpRequest","open","setRequestHeader","Object","keys","header","onload","responseText","onerror","ontimeout","DefaultHttpClient","_httpClient","_isAborted","LongPollingTransport","_pollAbort","_options","_running","onreceive","onclose","_connect","transferFormat","pollOptions","pollUrl","isRequired","isIn","_url","Binary","_defineProperty","now","_closeError","_receiving","_poll","_poll2","_callee2","_context2","pollAborted","_raiseOnClose","_callee3","_context3","_stop","_callee4","_getUserAgentHeader3","_getUserAgentHeader4","deleteOptions","_context4","delete","logMessage","ServerSentEventsTransport","accessToken","encodeURIComponent","opened","Text","eventSource","EventSource","onmessage","_close","onopen","_eventSource","close","WebSocketTransport","webSocketConstructor","_logMessageContent","_webSocketConstructor","_headers","token","webSocket","replace","binaryType","_event","_webSocket","event","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","code","reason","HttpConnection","_stopPromiseResolver","features","_negotiateVersion","baseUrl","_resolveUrl","webSocketModule","eventSourceModule","WebSocket","_connectionState","_connectionStarted","_start","_startInternalPromise","_startInternal","_stopPromise","_sendQueue","TransportSendQueue","_stopInternal","_stopInternal2","_stopError","t1","_stopConnection","_startInternal2","negotiateResponse","redirects","_loop","_context5","skipNegotiation","WebSockets","_constructTransport","_startTransport","_getNegotiationResponse","ProtocolVersion","delegateYield","_createTransport","inherentKeepAlive","_getNegotiationResponse2","_callee5","negotiateUrl","_context6","_resolveNegotiateUrl","JSON","parse","negotiateVersion","connectionToken","connectionId","_createTransport2","_callee6","requestedTransport","requestedTransferFormat","connectUrl","transportExceptions","transports","negotiate","_iterator","_step","endpoint","transportOrError","_context7","_createConnectUrl","_isITransport","availableTransports","_createForOfIteratorHelper","s","n","done","_resolveTransportOrError","push","t2","f","_x7","_x8","_x9","ServerSentEvents","LongPolling","connect","actualTransport","transportMatches","transferFormats","map","ex","lastIndexOf","aTag","createElement","href","substring","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","_sendLoop2","_callee7","transportResult","_context8","_concatBuffers","arrayBuffers","_step2","totalLength","b","reduce","a","result","offset","_iterator2","item","set","err","buffer","_ref","_resolver","_rejecter","TextMessageFormat","output","RecordSeparator","input","messages","pop","RecordSeparatorCode","String","fromCharCode","MessageType","HandshakeProtocol","handshakeRequest","write","stringify","messageData","remainingData","binaryData","separatorIndex","responseLength","Array","slice","textData","type","HubConnectionState","Subject","_step3","_iterator3","complete","HubConnection","connection","protocol","reconnectPolicy","_nextKeepAlive","_freezeEventListener","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","_protocol","_reconnectPolicy","_handshakeProtocol","_processIncomingData","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","Disconnected","_cachedPingMessage","writeMessage","Ping","Reconnecting","_startPromise","_startWithStateTransitions","_startWithStateTransitions2","Connecting","addEventListener","Connected","handshakePromise","_stopDuringStartError","_handshakeResolver","_handshakeRejecter","start","writeHandshakeRequest","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_cleanupPingTimer","startPromise","Disconnecting","_reconnectDelayHandle","_completeClose","methodName","_len","args","_key","promiseQueue","_this$_replaceStreami","_replaceStreamingParams","_this$_replaceStreami2","streams","streamIds","invocationDescriptor","_createStreamInvocation","cancelInvocation","_createCancelInvocation","invocationId","then","_sendWithProtocol","invocationEvent","Completion","_launchStreams","_len2","_key2","_this$_replaceStreami3","_this$_replaceStreami4","sendPromise","_createInvocation","_len3","_key3","_this$_replaceStreami5","_this$_replaceStreami6","newMethod","toLowerCase","handlers","removeIdx","callback","_processHandshakeResponse","parseMessages","Invocation","_invokeClientMethod","StreamItem","Close","allowReconnect","responseMessage","_this$_handshakeProto","parseHandshakeResponse","_this$_handshakeProto2","getTime","_timeoutHandle","serverTimeout","_pingServerHandle","nextPing","_invokeClientMethod2","invocationMessage","methods","methodsCopy","expectsResponse","res","exception","completionMessage","m","prevRes","target","_createCompletionMessage","_cancelCallbacksWithError","_reconnect","removeEventListener","_reconnect2","reconnectStartTime","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","callbacks","nonblocking","_this9","streamId","subscribe","_createStreamItemMessage","i","argument","_isObservable","arg","StreamInvocation","id","CancelInvocation","JsonHubProtocol","hubMessages","parsedMessage","_isInvocationMessage","_isStreamItemMessage","_isCompletionMessage","_assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","HubConnectionBuilder","logging","mapping","parseLogLevel","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","retryDelaysOrReconnectPolicy","isArray","create","RowContext","createContext","__rest","t","p","hasOwnProperty","getOwnPropertySymbols","propertyIsEnumerable","sizes","Col","React","props","ref","_classNames","_React$useContext","ConfigContext","getPrefixCls","direction","_React$useContext2","gutter","supportFlexGap","customizePrefixCls","prefixCls","span","order","pull","className","children","flex","style","others","_useColStyle","useColStyle","_useColStyle2","wrapSSR","hashId","sizeClassObj","size","_Object$assign","sizeProps","propSize","assign","classes","classNames","mergedStyle","horizontalGutter","paddingLeft","paddingRight","verticalGutter","paddingTop","paddingBottom","test","parseFlex","minWidth","useMergePropByScreen","oriProp","screen","_React$useState","_React$useState2","prop","setProp","responsiveArray","breakpoint","curVal","calcMergeAlignOrJustify","Row","justify","align","_props$gutter","_React$useState3","xs","sm","md","lg","xl","xxl","_React$useState4","screens","setScreens","_React$useState5","_React$useState6","curScreens","setCurScreens","mergeAlign","mergeJustify","useFlexGapSupport","gutterRef","responsiveObserver","useResponsiveObserver","currentGutter","current","unsubscribe","_useRowStyle","useRowStyle","_useRowStyle2","gutters","results","g","getGutter","rowStyle","marginLeft","marginRight","_gutters","rowGap","marginTop","marginBottom","_gutters2","gutterH","gutterV","rowContext","genGridRowStyle","componentCls","display","flexFlow","flexWrap","justifyContent","alignItems","genGridColStyle","position","maxWidth","minHeight","genGridStyle","sizeCls","gridColumns","gridColumnsStyle","insetInlineStart","insetInlineEnd","marginInlineStart","genLoopGridColumnsStyle","genComponentStyleHook","gridToken","mergeToken","gridMediaSizesMap","screenSMMin","screenMDMin","screenLGMin","screenXLMin","screenXXLMin","screenSize","genGridMediaStyle","pre","cur","InternalItem","_a","actions","extra","colStyle","_useContext2","useContext","ListContext","grid","itemLayout","actionsContent","action","Element","itemChildren","Children","element","isItemContainsTextNodeAndNotSingular","cloneElement","Item","forwardRef","Meta","avatar","title","description","classString","genBorderedStyle","_$concat","listBorderedCls","paddingLG","margin","padding","listItemPaddingSM","marginLG","borderRadiusLG","border","lineWidth","lineType","colorBorder","borderRadius","paddingInline","genResponsiveStyle","_mediaScreenAndM","_$concat8","_mediaScreenAndM2","_ref2","screenSM","screenMD","marginSM","contentWidth","genBaseStyle","_$concat10","_$concat11","_$concat12","_Object$assign2","_$concat$concat3","_ref3","antCls","controlHeight","paddingSM","listItemPadding","colorPrimary","listItemPaddingLG","paddingXS","colorText","colorTextDescription","motionDurationSlow","alignCls","textAlign","resetComponent","outline","background","paddingBlock","marginBlockStart","listStyle","color","marginInlineEnd","width","marginXXS","fontSize","lineHeight","transition","marginXXL","paddingInlineStart","insetBlockStart","height","Math","ceil","transform","backgroundColor","colorSplit","fontSizeSM","colorTextDisabled","marginBlockEnd","borderBlockEnd","fontSizeLG","lineHeightLG","borderTop","float","listToken","controlHeightLG","paddingContentVertical","paddingContentVerticalSM","paddingContentHorizontal","paddingContentVerticalLG","paddingContentHorizontalLG","Consumer","List","_b","_a$pagination","pagination","_a$bordered","bordered","_a$split","rootClassName","loadMore","_a$dataSource","dataSource","footer","_a$loading","loading","rowKey","renderItem","locale","rest","paginationObj","defaultCurrent","paginationCurrent","setPaginationCurrent","defaultPageSize","paginationSize","setPaginationSize","renderEmpty","triggerPaginationEvent","eventName","page","pageSize","onPaginationChange","onPaginationShowSizeChange","_useStyle","useStyle","_useStyle2","loadingProp","spinning","isLoading","paginationProps","extendsObject","total","largestPage","paginationContent","Pagination","onChange","onShowSizeChange","splitDataSource","needResponsive","some","includes","useBreakpoint","currentBreakpoint","columnCount","column","childrenContent","items","renderInnerItem","child","emptyText","DefaultRenderEmpty","componentName","paginationPosition","contextValue","Provider","Spin"],"sourceRoot":""}