{"version":3,"file":"static/js/588.b1239a3a.chunk.js","mappings":"kPAIMA,EAAc,WAKhB,SAAAA,KAAsBC,EAAAA,EAAAA,GAAA,KAAAD,GAAA,KAJtBE,gBAAU,EAKNC,KAAKD,YAAa,IAAIE,EAAAA,GACjBC,QAAQ,GAADC,OAAIC,EAAAA,EAAAA,SAAmB,YAAY,CACvCC,mBAAoB,WAChB,IAAMC,EAAQC,EAAAA,EAAAA,iBACd,OAAOD,GAAgB,EAC3B,IAEHE,iBAAiBP,EAAAA,EAAAA,aACjBQ,QAELT,KAAKD,WACAW,QACAC,MAAK,kBAAMC,QAAQC,IAAI,qBAAqB,IAC5CC,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAI,oCAAsCE,EAAI,GAC5E,CAOC,OAPAC,EAAAA,EAAAA,GAAAnB,EAAA,EAAAoB,IAAA,yBAAAC,MASD,SAAuBC,GACnBnB,KAAKD,WAAWqB,GAAG,iBAAkBD,EACzC,GAAC,CAAAF,IAAA,uBAAAC,MACD,SAAqBC,GACjBnB,KAAKD,WAAWsB,IAAI,iBAAkBF,EAC1C,GAAC,CAAAF,IAAA,OAAAC,MAED,SAAKI,EAAcC,GACfvB,KAAKD,WAAWyB,OAAO,cAAeF,EAAMC,EAChD,IAAC,EAAAN,IAAA,cAAAC,MAhBD,WAII,OAHKrB,EAAe4B,WAChB5B,EAAe4B,SAAW,IAAI5B,GAE3BA,EAAe4B,QAC1B,KAAC5B,CAAA,CA3Be,GAAdA,EAGa4B,cAAQ,E,kCCN3B,EAAgC,qCAAhC,EAAmF,mCAAnF,EAAkI,iCAAlI,EAAuL,yC,SC8DvL,EAzDoC,WACnC,IAAAC,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCH,EAAOK,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAAgCJ,EAAAA,EAAAA,UAAmB,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA/CE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACtB/B,GAAUkC,EAAAA,EAAAA,QAAOtC,EAAeuC,gBACtCC,EAAAA,EAAAA,YAAU,WACT,IAAMC,EAAiBrC,EAAQsC,QAEzBpB,EAAoB,SAACG,EAAckB,GACxCN,GAAY,SAACO,GAAY,SAAAtC,QAAAuC,EAAAA,EAAAA,GACrBD,GAAY,IAAAtC,OACZmB,EAAI,MAAAnB,OAAKqC,IAAe,IAE5B5B,QAAQC,IAAI,qBAAsB2B,EACnC,EAIA,OAFAF,EAAeK,uBAAuBxB,GAE/B,WACNmB,EAAeM,qBAAqBzB,EACrC,CACD,GAAG,IAEH,IAAM0B,EAAc,WACI,KAAnBtB,EAAQuB,SAEX7C,EAAQsC,QAAQQ,KAAK,QAASxB,GAC9BO,EAAW,IAEb,EACA,OACCkB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAqBC,SAAA,EACpCC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CACJJ,UAAWC,EACXI,UAAQ,EACRC,WAAYtB,EACZuB,WAAY,SAACjC,GAAO,OAAK6B,EAAAA,EAAAA,KAACC,EAAAA,GAAAA,KAAS,CAAAF,SAAE5B,GAAoB,KAE1D6B,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CACLR,UAAWC,EACXQ,KAAK,OACLxC,MAAOK,EACPoC,SAAU,SAACC,GAAC,OAAK9B,EAAW8B,EAAEC,OAAO3C,MAAM,EAC3C4C,UAAW,SAACF,GACG,UAAVA,EAAE3C,KAAiB4B,GACxB,KAEDO,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CACNd,UAAWC,EACXQ,KAAK,UACLM,QAASnB,EAAYM,SACrB,mBAKJ,C","sources":["services/SignalRService.ts","webpack://spirify/./src/pages/ChatComponent.module.scss?a68e","pages/ChatComponent.tsx"],"sourcesContent":["import * as signalR from \"@microsoft/signalr\";\r\nimport TokenService from \"authentication/TokenService\";\r\nimport ApiManager from \"./ApiManager\";\r\n\r\nclass SignalRService {\r\n    connection: signalR.HubConnection;\r\n\r\n    private static instance: SignalRService;\r\n\r\n    private constructor() {\r\n        this.connection = new signalR.HubConnectionBuilder()\r\n            .withUrl(`${ApiManager.BASE_URL}/chatHub`, {\r\n                accessTokenFactory: () => {\r\n                    const token = TokenService.getAccessToken();\r\n                    return token ? token : '';\r\n                }\r\n            })\r\n            .configureLogging(signalR.LogLevel.Information)\r\n            .build();\r\n\r\n        this.connection\r\n            .start()\r\n            .then(() => console.log('Connection started'))\r\n            .catch(err => console.log('Error while starting connection: ' + err));\r\n    }\r\n\r\n    public static getInstance(): SignalRService {\r\n        if (!SignalRService.instance) {\r\n            SignalRService.instance = new SignalRService();\r\n        }\r\n        return SignalRService.instance;\r\n    }\r\n\r\n    registerOnServerEvents(onMessageReceived: (user: string, message: string) => void) {\r\n        this.connection.on('ReceiveMessage', onMessageReceived);\r\n    }\r\n    removeOnServerEvents(onMessageReceived: (user: string, message: string) => void) {\r\n        this.connection.off('ReceiveMessage', onMessageReceived);\r\n    }\r\n\r\n    send(user: string, message: string) {\r\n        this.connection.invoke('SendMessage', user, message);\r\n    }\r\n}\r\n\r\nexport { SignalRService };\r\n","// extracted by mini-css-extract-plugin\nexport default {\"chatComponent\":\"ChatComponent_chatComponent__8Je4v\",\"messageList\":\"ChatComponent_messageList__oUSKb\",\"chatInput\":\"ChatComponent_chatInput__SC6nX\",\"sendMessageButton\":\"ChatComponent_sendMessageButton__g3g3a\"};","// Your component file\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { SignalRService } from \"services/SignalRService\";\r\nimport { Input, Button, List } from \"antd\";\r\nimport styles from \"./ChatComponent.module.scss\";\r\n\r\nconst ChatComponent: React.FC<{}> = () => {\r\n\tconst [message, setMessage] = useState(\"\");\r\n\tconst [messages, setMessages] = useState<string[]>([]);\r\n\tconst signalR = useRef(SignalRService.getInstance());\r\n\tuseEffect(() => {\r\n\t\tconst currentSignalR = signalR.current;\r\n\r\n\t\tconst onMessageReceived = (user: string, receivedMessage: string) => {\r\n\t\t\tsetMessages((prevMessages) => [\r\n\t\t\t\t...prevMessages,\r\n\t\t\t\t`${user}: ${receivedMessage}`,\r\n\t\t\t]);\r\n\t\t\tconsole.log(\"Received message: \", receivedMessage);\r\n\t\t};\r\n\r\n\t\tcurrentSignalR.registerOnServerEvents(onMessageReceived);\r\n\r\n\t\treturn () => {\r\n\t\t\tcurrentSignalR.removeOnServerEvents(onMessageReceived);\r\n\t\t};\r\n\t}, []);\r\n\r\n\tconst sendMessage = () => {\r\n\t\tif (message.trim() !== \"\") {\r\n\t\t\t// To prevent empty message sending\r\n\t\t\tsignalR.current.send(\"user1\", message);\r\n\t\t\tsetMessage(\"\");\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<div className={styles.chatComponent}>\r\n\t\t\t<List\r\n\t\t\t\tclassName={styles.messageList}\r\n\t\t\t\tbordered\r\n\t\t\t\tdataSource={messages}\r\n\t\t\t\trenderItem={(message) => <List.Item>{message}</List.Item>}\r\n\t\t\t/>\r\n\t\t\t<Input\r\n\t\t\t\tclassName={styles.chatInput}\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={message}\r\n\t\t\t\tonChange={(e) => setMessage(e.target.value)}\r\n\t\t\t\tonKeyDown={(e) => {\r\n\t\t\t\t\tif (e.key === \"Enter\") sendMessage();\r\n\t\t\t\t}} // Trigger send on Enter\r\n\t\t\t/>\r\n\t\t\t<Button\r\n\t\t\t\tclassName={styles.sendMessageButton}\r\n\t\t\t\ttype=\"primary\"\r\n\t\t\t\tonClick={sendMessage}\r\n\t\t\t>\r\n\t\t\t\tSend Message\r\n\t\t\t</Button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChatComponent;\r\n"],"names":["SignalRService","_classCallCheck","connection","this","signalR","withUrl","concat","ApiManager","accessTokenFactory","token","TokenService","configureLogging","build","start","then","console","log","catch","err","_createClass","key","value","onMessageReceived","on","off","user","message","invoke","instance","_useState","useState","_useState2","_slicedToArray","setMessage","_useState3","_useState4","messages","setMessages","useRef","getInstance","useEffect","currentSignalR","current","receivedMessage","prevMessages","_toConsumableArray","registerOnServerEvents","removeOnServerEvents","sendMessage","trim","send","_jsxs","className","styles","children","_jsx","List","bordered","dataSource","renderItem","Input","type","onChange","e","target","onKeyDown","Button","onClick"],"sourceRoot":""}