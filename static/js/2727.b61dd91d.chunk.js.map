{"version":3,"file":"static/js/2727.b61dd91d.chunk.js","mappings":"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","sources":["../node_modules/dagre-d3-es/src/dagre-js/label/add-html-label.js","../node_modules/dagre-d3-es/src/dagre-js/util.js","../node_modules/khroma/dist/methods/channel.js","../node_modules/mermaid/dist/styles-7882abfe.js"],"sourcesContent":["import * as util from '../util.js';\n\nexport { addHtmlLabel };\n\nfunction addHtmlLabel(root, node) {\n  var fo = root.append('foreignObject').attr('width', '100000');\n\n  var div = fo.append('xhtml:div');\n  div.attr('xmlns', 'http://www.w3.org/1999/xhtml');\n\n  var label = node.label;\n  switch (typeof label) {\n    case 'function':\n      div.insert(label);\n      break;\n    case 'object':\n      // Currently we assume this is a DOM object.\n      div.insert(function () {\n        return label;\n      });\n      break;\n    default:\n      div.html(label);\n  }\n\n  util.applyStyle(div, node.labelStyle);\n  div.style('display', 'inline-block');\n  // Fix for firefox\n  div.style('white-space', 'nowrap');\n\n  var client = div.node().getBoundingClientRect();\n  fo.attr('width', client.width).attr('height', client.height);\n\n  return fo;\n}\n","import * as _ from 'lodash-es';\n\n// Public utility functions\nexport { isSubgraph, edgeToId, applyStyle, applyClass, applyTransition };\n\n/*\n * Returns true if the specified node in the graph is a subgraph node. A\n * subgraph node is one that contains other nodes.\n */\nfunction isSubgraph(g, v) {\n  return !!g.children(v).length;\n}\n\nfunction edgeToId(e) {\n  return escapeId(e.v) + ':' + escapeId(e.w) + ':' + escapeId(e.name);\n}\n\nvar ID_DELIM = /:/g;\nfunction escapeId(str) {\n  return str ? String(str).replace(ID_DELIM, '\\\\:') : '';\n}\n\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr('style', styleFn);\n  }\n}\n\nfunction applyClass(dom, classFn, otherClasses) {\n  if (classFn) {\n    dom.attr('class', classFn).attr('class', otherClasses + ' ' + dom.attr('class'));\n  }\n}\n\nfunction applyTransition(selection, g) {\n  var graph = g.graph();\n\n  if (_.isPlainObject(graph)) {\n    var transition = graph.transition;\n    if (_.isFunction(transition)) {\n      return transition(selection);\n    }\n  }\n\n  return selection;\n}\n","/* IMPORT */\nimport _ from '../utils/index.js';\nimport Color from '../color/index.js';\n/* MAIN */\nconst channel = (color, channel) => {\n    return _.lang.round(Color.parse(color)[channel]);\n};\n/* EXPORT */\nexport default channel;\n","import * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { curveLinear, select, selectAll } from \"d3\";\nimport { f as flowDb } from \"./flowDb-9e6c6aac.js\";\nimport { k as getStylesFromArray, l as log, n as evaluate, c as getConfig, e as common, o as interpolateToCurve, u as utils, p as setupGraphViewbox } from \"./mermaid-aad43469.js\";\nimport { r as render } from \"./index-1e7f2254.js\";\nimport { addHtmlLabel } from \"dagre-d3-es/src/dagre-js/label/add-html-label.js\";\nimport * as khroma from \"khroma\";\nconst conf = {};\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\nconst addVertices = function(vert, g, svgId, root, doc, diagObj) {\n  const svg = root.select(`[id=\"${svgId}\"]`);\n  const keys = Object.keys(vert);\n  keys.forEach(function(id) {\n    const vertex = vert[id];\n    let classStr = \"default\";\n    if (vertex.classes.length > 0) {\n      classStr = vertex.classes.join(\" \");\n    }\n    classStr = classStr + \" flowchart-label\";\n    const styles = getStylesFromArray(vertex.styles);\n    let vertexText = vertex.text !== void 0 ? vertex.text : vertex.id;\n    let vertexNode;\n    log.info(\"vertex\", vertex, vertex.labelType);\n    if (vertex.labelType === \"markdown\") {\n      log.info(\"vertex\", vertex, vertex.labelType);\n    } else {\n      if (evaluate(getConfig().flowchart.htmlLabels)) {\n        const node = {\n          label: vertexText.replace(\n            /fa[blrs]?:fa-[\\w-]+/g,\n            (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n          )\n        };\n        vertexNode = addHtmlLabel(svg, node).node();\n        vertexNode.parentNode.removeChild(vertexNode);\n      } else {\n        const svgLabel = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        svgLabel.setAttribute(\"style\", styles.labelStyle.replace(\"color:\", \"fill:\"));\n        const rows = vertexText.split(common.lineBreakRegex);\n        for (const row of rows) {\n          const tspan = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n          tspan.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n          tspan.setAttribute(\"dy\", \"1em\");\n          tspan.setAttribute(\"x\", \"1\");\n          tspan.textContent = row;\n          svgLabel.appendChild(tspan);\n        }\n        vertexNode = svgLabel;\n      }\n    }\n    let radious = 0;\n    let _shape = \"\";\n    switch (vertex.type) {\n      case \"round\":\n        radious = 5;\n        _shape = \"rect\";\n        break;\n      case \"square\":\n        _shape = \"rect\";\n        break;\n      case \"diamond\":\n        _shape = \"question\";\n        break;\n      case \"hexagon\":\n        _shape = \"hexagon\";\n        break;\n      case \"odd\":\n        _shape = \"rect_left_inv_arrow\";\n        break;\n      case \"lean_right\":\n        _shape = \"lean_right\";\n        break;\n      case \"lean_left\":\n        _shape = \"lean_left\";\n        break;\n      case \"trapezoid\":\n        _shape = \"trapezoid\";\n        break;\n      case \"inv_trapezoid\":\n        _shape = \"inv_trapezoid\";\n        break;\n      case \"odd_right\":\n        _shape = \"rect_left_inv_arrow\";\n        break;\n      case \"circle\":\n        _shape = \"circle\";\n        break;\n      case \"ellipse\":\n        _shape = \"ellipse\";\n        break;\n      case \"stadium\":\n        _shape = \"stadium\";\n        break;\n      case \"subroutine\":\n        _shape = \"subroutine\";\n        break;\n      case \"cylinder\":\n        _shape = \"cylinder\";\n        break;\n      case \"group\":\n        _shape = \"rect\";\n        break;\n      case \"doublecircle\":\n        _shape = \"doublecircle\";\n        break;\n      default:\n        _shape = \"rect\";\n    }\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: vertexText,\n      labelType: vertex.labelType,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      link: vertex.link,\n      linkTarget: vertex.linkTarget,\n      tooltip: diagObj.db.getTooltip(vertex.id) || \"\",\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      haveCallback: vertex.haveCallback,\n      width: vertex.type === \"group\" ? 500 : void 0,\n      dir: vertex.dir,\n      type: vertex.type,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding\n    });\n    log.info(\"setNode\", {\n      labelStyle: styles.labelStyle,\n      labelType: vertex.labelType,\n      shape: _shape,\n      labelText: vertexText,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      width: vertex.type === \"group\" ? 500 : void 0,\n      type: vertex.type,\n      dir: vertex.dir,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding\n    });\n  });\n};\nconst addEdges = function(edges, g, diagObj) {\n  log.info(\"abc78 edges = \", edges);\n  let cnt = 0;\n  let linkIdCnt = {};\n  let defaultStyle;\n  let defaultLabelStyle;\n  if (edges.defaultStyle !== void 0) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n  edges.forEach(function(edge) {\n    cnt++;\n    const linkIdBase = \"L-\" + edge.start + \"-\" + edge.end;\n    if (linkIdCnt[linkIdBase] === void 0) {\n      linkIdCnt[linkIdBase] = 0;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    } else {\n      linkIdCnt[linkIdBase]++;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    }\n    let linkId = linkIdBase + \"-\" + linkIdCnt[linkIdBase];\n    log.info(\"abc78 new link id to be used is\", linkIdBase, linkId, linkIdCnt[linkIdBase]);\n    const linkNameStart = \"LS-\" + edge.start;\n    const linkNameEnd = \"LE-\" + edge.end;\n    const edgeData = { style: \"\", labelStyle: \"\" };\n    edgeData.minlen = edge.length || 1;\n    if (edge.type === \"arrow_open\") {\n      edgeData.arrowhead = \"none\";\n    } else {\n      edgeData.arrowhead = \"normal\";\n    }\n    edgeData.arrowTypeStart = \"arrow_open\";\n    edgeData.arrowTypeEnd = \"arrow_open\";\n    switch (edge.type) {\n      case \"double_arrow_cross\":\n        edgeData.arrowTypeStart = \"arrow_cross\";\n      case \"arrow_cross\":\n        edgeData.arrowTypeEnd = \"arrow_cross\";\n        break;\n      case \"double_arrow_point\":\n        edgeData.arrowTypeStart = \"arrow_point\";\n      case \"arrow_point\":\n        edgeData.arrowTypeEnd = \"arrow_point\";\n        break;\n      case \"double_arrow_circle\":\n        edgeData.arrowTypeStart = \"arrow_circle\";\n      case \"arrow_circle\":\n        edgeData.arrowTypeEnd = \"arrow_circle\";\n        break;\n    }\n    let style = \"\";\n    let labelStyle = \"\";\n    switch (edge.stroke) {\n      case \"normal\":\n        style = \"fill:none;\";\n        if (defaultStyle !== void 0) {\n          style = defaultStyle;\n        }\n        if (defaultLabelStyle !== void 0) {\n          labelStyle = defaultLabelStyle;\n        }\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"solid\";\n        break;\n      case \"dotted\":\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"dotted\";\n        edgeData.style = \"fill:none;stroke-width:2px;stroke-dasharray:3;\";\n        break;\n      case \"thick\":\n        edgeData.thickness = \"thick\";\n        edgeData.pattern = \"solid\";\n        edgeData.style = \"stroke-width: 3.5px;fill:none;\";\n        break;\n      case \"invisible\":\n        edgeData.thickness = \"invisible\";\n        edgeData.pattern = \"solid\";\n        edgeData.style = \"stroke-width: 0;fill:none;\";\n        break;\n    }\n    if (edge.style !== void 0) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    }\n    edgeData.style = edgeData.style += style;\n    edgeData.labelStyle = edgeData.labelStyle += labelStyle;\n    if (edge.interpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n    if (edge.text === void 0) {\n      if (edge.style !== void 0) {\n        edgeData.arrowheadStyle = \"fill: #333\";\n      }\n    } else {\n      edgeData.arrowheadStyle = \"fill: #333\";\n      edgeData.labelpos = \"c\";\n    }\n    edgeData.labelType = edge.labelType;\n    edgeData.label = edge.text.replace(common.lineBreakRegex, \"\\n\");\n    if (edge.style === void 0) {\n      edgeData.style = edgeData.style || \"stroke: #333; stroke-width: 1.5px;fill:none;\";\n    }\n    edgeData.labelStyle = edgeData.labelStyle.replace(\"color:\", \"fill:\");\n    edgeData.id = linkId;\n    edgeData.classes = \"flowchart-link \" + linkNameStart + \" \" + linkNameEnd;\n    g.setEdge(edge.start, edge.end, edgeData, cnt);\n  });\n};\nconst getClasses = function(text, diagObj) {\n  log.info(\"Extracting classes\");\n  diagObj.db.clear();\n  try {\n    diagObj.parse(text);\n    return diagObj.db.getClasses();\n  } catch (e) {\n    return;\n  }\n};\nconst draw = async function(text, id, _version, diagObj) {\n  log.info(\"Drawing flowchart\");\n  diagObj.db.clear();\n  flowDb.setGen(\"gen-2\");\n  diagObj.parser.parse(text);\n  let dir = diagObj.db.getDirection();\n  if (dir === void 0) {\n    dir = \"TD\";\n  }\n  const { securityLevel, flowchart: conf2 } = getConfig();\n  const nodeSpacing = conf2.nodeSpacing || 50;\n  const rankSpacing = conf2.rankSpacing || 50;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: dir,\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 0,\n    marginy: 0\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  log.info(\"Subgraphs - \", subGraphs);\n  for (let i2 = subGraphs.length - 1; i2 >= 0; i2--) {\n    subG = subGraphs[i2];\n    log.info(\"Subgraph - \", subG);\n    diagObj.db.addVertex(\n      subG.id,\n      { text: subG.title, type: subG.labelType },\n      \"group\",\n      void 0,\n      subG.classes,\n      subG.dir\n    );\n  }\n  const vert = diagObj.db.getVertices();\n  const edges = diagObj.db.getEdges();\n  log.info(\"Edges\", edges);\n  let i = 0;\n  for (i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    selectAll(\"cluster\").append(\"text\");\n    for (let j = 0; j < subG.nodes.length; j++) {\n      log.info(\"Setting up subgraphs\", subG.nodes[j], subG.id);\n      g.setParent(subG.nodes[j], subG.id);\n    }\n  }\n  addVertices(vert, g, id, root, doc, diagObj);\n  addEdges(edges, g);\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"point\", \"circle\", \"cross\"], \"flowchart\", id);\n  utils.insertTitle(svg, \"flowchartTitleText\", conf2.titleTopMargin, diagObj.db.getDiagramTitle());\n  setupGraphViewbox(g, svg, conf2.diagramPadding, conf2.useMaxWidth);\n  diagObj.db.indexNodes(\"subGraph\" + i);\n  if (!conf2.htmlLabels) {\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      const dim = label.getBBox();\n      const rect = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n      rect.setAttribute(\"rx\", 0);\n      rect.setAttribute(\"ry\", 0);\n      rect.setAttribute(\"width\", dim.width);\n      rect.setAttribute(\"height\", dim.height);\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n  const keys = Object.keys(vert);\n  keys.forEach(function(key) {\n    const vertex = vert[key];\n    if (vertex.link) {\n      const node = select(\"#\" + id + ' [id=\"' + key + '\"]');\n      if (node) {\n        const link = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"a\");\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"class\", vertex.classes.join(\" \"));\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"href\", vertex.link);\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"rel\", \"noopener\");\n        if (securityLevel === \"sandbox\") {\n          link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"target\", \"_top\");\n        } else if (vertex.linkTarget) {\n          link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"target\", vertex.linkTarget);\n        }\n        const linkNode = node.insert(function() {\n          return link;\n        }, \":first-child\");\n        const shape = node.select(\".label-container\");\n        if (shape) {\n          linkNode.append(function() {\n            return shape.node();\n          });\n        }\n        const label = node.select(\".label\");\n        if (label) {\n          linkNode.append(function() {\n            return label.node();\n          });\n        }\n      }\n    }\n  });\n};\nconst flowRendererV2 = {\n  setConf,\n  addVertices,\n  addEdges,\n  getClasses,\n  draw\n};\nconst fade = (color, opacity) => {\n  const channel = khroma.channel;\n  const r = channel(color, \"r\");\n  const g = channel(color, \"g\");\n  const b = channel(color, \"b\");\n  return khroma.rgba(r, g, b, opacity);\n};\nconst getStyles = (options) => `.label {\n    font-family: ${options.fontFamily};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n  .cluster-label text {\n    fill: ${options.titleColor};\n  }\n  .cluster-label span,p {\n    color: ${options.titleColor};\n  }\n\n  .label text,span,p {\n    fill: ${options.nodeTextColor || options.textColor};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n  .flowchart-label text {\n    text-anchor: middle;\n  }\n  // .flowchart-label .text-outer-tspan {\n  //   text-anchor: middle;\n  // }\n  // .flowchart-label .text-inner-tspan {\n  //   text-anchor: start;\n  // }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 2.0px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.5;\n      background-color: ${options.edgeLabelBackground};\n      fill: ${options.edgeLabelBackground};\n    }\n    text-align: center;\n  }\n\n  /* For html labels only */\n  .labelBkg {\n    background-color: ${fade(options.edgeLabelBackground, 0.5)};\n    // background-color: \n  }\n\n  .cluster rect {\n    fill: ${options.clusterBkg};\n    stroke: ${options.clusterBorder};\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  .cluster span,p {\n    color: ${options.titleColor};\n  }\n  /* .cluster div {\n    color: ${options.titleColor};\n  } */\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ${options.fontFamily};\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .flowchartTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`;\nconst flowStyles = getStyles;\nexport {\n  flowStyles as a,\n  flowRendererV2 as f\n};\n"],"names":["addHtmlLabel","root","node","fo","append","attr","div","label","insert","html","util","labelStyle","style","client","getBoundingClientRect","width","height","isSubgraph","g","v","children","length","edgeToId","e","escapeId","w","name","ID_DELIM","str","String","replace","applyStyle","dom","styleFn","applyClass","classFn","otherClasses","applyTransition","selection","graph","_","transition","color","channel","Color","conf","addVertices","vert","svgId","doc","diagObj","svg","select","concat","Object","keys","forEach","id","vertex","classStr","classes","join","vertexNode","styles","getStylesFromArray","vertexText","text","log","labelType","evaluate","getConfig","flowchart","htmlLabels","s","parentNode","removeChild","svgLabel","createElementNS","setAttribute","_step","rows","split","common","_iterator","_createForOfIteratorHelper","n","done","row","value","tspan","setAttributeNS","textContent","appendChild","err","f","radious","_shape","type","setNode","shape","labelText","rx","ry","class","link","linkTarget","tooltip","db","getTooltip","domId","lookUpDomId","haveCallback","dir","props","padding","addEdges","edges","defaultStyle","defaultLabelStyle","cnt","linkIdCnt","defaultStyles","edge","linkIdBase","start","end","linkId","linkNameStart","linkNameEnd","edgeData","minlen","arrowhead","arrowTypeStart","arrowTypeEnd","stroke","thickness","pattern","interpolate","curve","interpolateToCurve","curveLinear","defaultInterpolate","arrowheadStyle","labelpos","setEdge","draw","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_version","_getConfig","securityLevel","conf2","nodeSpacing","rankSpacing","sandboxElement","subG","subGraphs","i2","i","j","element","labels","_iterator2","_step2","dim","rect","wrap","_context","prev","next","clear","flowDb","parser","parse","getDirection","nodes","contentDocument","body","document","graphlib","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","getSubGraphs","addVertex","title","getVertices","getEdges","selectAll","setParent","render","utils","titleTopMargin","getDiagramTitle","setupGraphViewbox","diagramPadding","useMaxWidth","indexNodes","querySelectorAll","getBBox","insertBefore","firstChild","key","linkNode","stop","_x","_x2","_x3","_x4","apply","arguments","flowRendererV2","setConf","cnf","_i","_keys","getClasses","flowStyles","options","fontFamily","nodeTextColor","textColor","titleColor","mainBkg","nodeBorder","arrowheadColor","lineColor","edgeLabelBackground","opacity","khroma","r","b","fade","clusterBkg","clusterBorder","tertiaryColor","border2"],"sourceRoot":""}