{"version":3,"file":"static/js/847.009b5206.chunk.js","mappings":"+TASMA,EAAK,IAAIC,KACfD,EAAGE,IAAIC,KAMP,IAwBA,EAxB0D,SAAHC,GAAsB,IAAhBC,EAAQD,EAARC,SAC3DC,GAA0CC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACtCI,GAAgDL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvDE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAEtCG,EAAmBhB,EAAGiB,OAAOZ,GAC7Ba,GAAiBC,EAAAA,EAAAA,MAAcH,EAAkB,CAAEI,YAAa,IAChEC,EAAkBC,IAAAA,UAAgBJ,EAAgBI,IAAAA,UAAAA,OAAwB,UAEhF,OACEC,EAAAA,EAAAA,KAAA,OAAAC,UACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,OAAQ,CAAC,GAAI,IAAIH,SAAA,EACpBC,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACC,KAAM,GAAGL,SAAA,EACZD,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACC,QAASrB,EAAesB,SAAUrB,IAAoB,sBAC7DD,IAAiBa,EAAAA,EAAAA,KAAA,OAAKU,wBAAyB,CAAEC,OAAQlB,SAE5DS,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACC,KAAM,GAAGL,SAAA,EACZD,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACC,QAASjB,EAAkBkB,SAAUjB,IAAuB,iBACnED,IAAoBS,EAAAA,EAAAA,KAAA,OAAKY,UAAU,kBAAiBX,UAACD,EAAAA,EAAAA,KAAA,QAAMU,wBAAyB,CAAEC,OAAQb,cAKzG,EClCQe,EAAaC,EAAAA,EAAAA,SAkBrB,EAhBqC,WACnC,IAAA/B,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCD,EAAQG,EAAA,GAAE8B,EAAW9B,EAAA,GAE5B,OACEiB,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAACa,EAAQ,CACPG,MAAOlC,EACP2B,SAAU,SAACQ,GAAC,OAAKF,EAAYE,EAAEC,OAAOF,MAAM,EAC5CG,YAAY,8BACZC,KAAM,KAERpB,EAAAA,EAAAA,KAACqB,EAAgB,CAACvC,SAAUA,MAGlC,C","sources":["components/markdown/MarkdownRenderer.tsx","pages/MarkdownEditorPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MarkdownItAttrs from 'markdown-it-attrs';\r\nimport Prism from 'prismjs';\r\nimport { html as html_beautify } from 'js-beautify';\r\nimport 'prismjs/components/prism-markup';  // For HTML highlighting\r\nimport 'prismjs/themes/prism.css';  // Choose the theme you like\r\nimport { Row, Col, Switch } from 'antd';\r\n\r\nconst md = new MarkdownIt();\r\nmd.use(MarkdownItAttrs);\r\n\r\ninterface MarkdownRendererProps {\r\n  markdown: string;\r\n}\r\n\r\nconst MarkdownRenderer: React.FC<MarkdownRendererProps> = ({ markdown }) => {\r\n  const [isHTMLVisible, setIsHTMLVisible] = useState(true);\r\n  const [isRawHTMLVisible, setIsRawHTMLVisible] = useState(true);\r\n\r\n  const renderedMarkdown = md.render(markdown);\r\n  const beautifiedHTML = html_beautify(renderedMarkdown, { indent_size: 2 });\r\n  const highlightedHTML = Prism.highlight(beautifiedHTML, Prism.languages.markup, 'markup');\r\n\r\n  return (\r\n    <div>\r\n      <Row gutter={[16, 16]}>\r\n        <Col span={12}>\r\n          <Switch checked={isHTMLVisible} onChange={setIsHTMLVisible} /> Show Rendered HTML\r\n          {isHTMLVisible && <div dangerouslySetInnerHTML={{ __html: renderedMarkdown }} />}\r\n        </Col>\r\n        <Col span={12}>\r\n          <Switch checked={isRawHTMLVisible} onChange={setIsRawHTMLVisible} /> Show Raw HTML\r\n          {isRawHTMLVisible && <pre className=\"language-markup\"><code dangerouslySetInnerHTML={{ __html: highlightedHTML }} /></pre>}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarkdownRenderer;\r\n","import React, { useState } from 'react';\r\nimport { Input } from 'antd';\r\nimport MarkdownRenderer from 'components/markdown/MarkdownRenderer';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst MarkdownEditorPage: React.FC = () => {\r\n  const [markdown, setMarkdown] = useState('');\r\n\r\n  return (\r\n    <div>\r\n      <TextArea\r\n        value={markdown}\r\n        onChange={(e) => setMarkdown(e.target.value)}\r\n        placeholder=\"Write some markdown here...\"\r\n        rows={4}\r\n      />\r\n      <MarkdownRenderer markdown={markdown} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarkdownEditorPage;\r\n"],"names":["md","MarkdownIt","use","MarkdownItAttrs","_ref","markdown","_useState","useState","_useState2","_slicedToArray","isHTMLVisible","setIsHTMLVisible","_useState3","_useState4","isRawHTMLVisible","setIsRawHTMLVisible","renderedMarkdown","render","beautifiedHTML","html_beautify","indent_size","highlightedHTML","Prism","_jsx","children","_jsxs","Row","gutter","Col","span","Switch","checked","onChange","dangerouslySetInnerHTML","__html","className","TextArea","Input","setMarkdown","value","e","target","placeholder","rows","MarkdownRenderer"],"sourceRoot":""}