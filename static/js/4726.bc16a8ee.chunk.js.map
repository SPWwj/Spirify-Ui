{"version":3,"file":"static/js/4726.bc16a8ee.chunk.js","mappings":"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","sources":["../node_modules/lodash-es/clone.js","../node_modules/dagre-d3-es/src/graphlib/json.js","../node_modules/mermaid/dist/index-1e7f2254.js"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, g as insertEdge, h as positionEdgeLabel } from \"./edges-66ea8538.js\";\nimport { l as log, n as evaluate, c as getConfig } from \"./mermaid-aad43469.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { c as createText } from \"./createText-a49d2d2a.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancenstorId) => {\n  log.trace(\"In isDecendant\", ancenstorId, \" \", id, \" = \", descendants[ancenstorId].includes(id));\n  if (descendants[ancenstorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Decendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in decendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Decendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = JSON.parse(JSON.stringify(edge));\n      const edge2 = JSON.parse(JSON.stringify(edge));\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(getConfig().flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + node.x + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  label.attr(\n    \"transform\",\n    \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2 - node.padding / 3 + (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) + \")\"\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramtype, parentCluster) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(nodes, node.graph, diagramtype, graph.node(v));\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translateing: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramtype, id) => {\n  insertMarkers(elem, markers, diagramtype, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", graphlibJson.write(graph));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", graphlibJson.write(graph));\n  await recursiveRender(elem, graph, diagramtype);\n};\nexport {\n  render as r\n};\n"],"names":["value","baseClone","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","_","graph","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","descendants","parents","isDescendant","id","ancenstorId","log","includes","copy","clusterId","newGraph","rootId","children","push","forEach","length","data","setNode","setParent","data2","edgeInCluster","setEdge","removeNode","extractDescendants","_step","res","_toConsumableArray","_iterator","_createForOfIteratorHelper","s","n","done","child","concat","err","f","findNonClusterChild","_step2","_iterator2","_id","getAnchorId","externalConnections","adjustClustersAndEdges","depth","clusterData","JSON","stringify","removeEdge","specialId","domId","labelStyle","labelText","label","padding","shape","style","edge1","parse","edge2","arrowTypeEnd","fromCluster","toCluster","graphlibJson","extractor","_step3","hasChildren","_iterator3","_step4","_iterator4","dir","rankdir","clusterGraph","graphlib","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","_step5","_iterator5","sorter","result","Object","assign","sorted","sortNodesByHierarchy","shapes","rect","shapeSvg","insert","attr","class","rect2","useHtmlLabels","evaluate","getConfig","flowchart","htmlLabels","text","labelType","createText","appendChild","createLabel","bbox","getBBox","div","dv","select","getBoundingClientRect","width","height","halfPadding","diff","rx","ry","x","y","rectBox","intersect","point","intersectRect","roundedWithTitle","classes","innerRect","append","noteGroup","divider","clusterElems","insertCluster","elem","recursiveRender","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","_elem","diagramtype","parentCluster","clusters","edgePaths","edgeLabels","wrap","_context2","prev","next","Promise","all","map","_ref2","_callee","o","newEl","_context","sent","updateNodeBounds","setNodeElem","insertNode","stop","_x5","apply","arguments","insertEdgeLabel","layout","positionNode","paths","insertEdge","positionEdgeLabel","type","abrupt","_x","_x2","_x3","_x4","render","_ref3","_callee3","markers","_context3","insertMarkers","clear$2","clear$3","_x6","_x7","_x8","_x9","_x10"],"sourceRoot":""}