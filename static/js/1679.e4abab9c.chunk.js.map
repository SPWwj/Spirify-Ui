{"version":3,"file":"static/js/1679.e4abab9c.chunk.js","mappings":"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","sources":["../node_modules/mermaid/dist/stateDiagram-v2-e65458cd.js"],"sourcesContent":["import { D as DEFAULT_STATE_TYPE, a as DIVIDER_TYPE, S as STMT_RELATION, b as STMT_STATE, c as DEFAULT_NESTED_DOC_DIR, p as parser, d as db, s as styles } from \"./styles-b820c189.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select } from \"d3\";\nimport { l as log, c as getConfig, u as utils, i as configureSvgSize, e as common } from \"./mermaid-aad43469.js\";\nimport { r as render } from \"./index-1e7f2254.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-66ea8538.js\";\nimport \"./createText-a49d2d2a.js\";\nimport \"mdast-util-from-markdown\";\nimport \"./svgDraw-95adee0a.js\";\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    cnf[key];\n  }\n};\nconst getClasses = function(text, diagramObj) {\n  log.trace(\"Extracting classes\");\n  diagramObj.db.clear();\n  try {\n    diagramObj.parser.parse(text);\n    diagramObj.db.extract(diagramObj.db.getRootDocV2());\n    return diagramObj.db.getClasses();\n  } catch (e) {\n    return e;\n  }\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === void 0 || dbInfoItem === null) {\n    return \"\";\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(\" \");\n    } else {\n      return \"\";\n    }\n  }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n  if (itemId !== \"root\") {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n      };\n    }\n    const newNode = nodeDb[itemId];\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n    if (!newNode.type && parsedItem.doc) {\n      log.info(\"Setting cluster for \", itemId, getDir(parsedItem));\n      newNode.type = \"group\";\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n    }\n    const nodeData = {\n      labelStyle: \"\",\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: \"\",\n      //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15\n      //getConfig().flowchart.padding\n    };\n    nodeData.centerLabel = true;\n    if (parsedItem.note) {\n      const noteData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: \"\",\n        // styles.style,\n        id: itemId + NOTE_ID + \"-\" + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15\n        //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: \"\",\n        // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: \"group\",\n        padding: 0\n        //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n      let from = itemId;\n      let to = noteData.id;\n      if (parsedItem.note.position === \"left of\") {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: \"none\",\n        arrowType: \"\",\n        style: G_EDGE_STYLE,\n        labelStyle: \"\",\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n  if (parent && parent.id !== \"root\") {\n    log.trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace(\"Adding nodes children \");\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  log.trace(\"items\", doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: \"edge\" + graphItemCount,\n            arrowhead: \"normal\",\n            arrowTypeEnd: \"arrow_barb\",\n            style: G_EDGE_STYLE,\n            labelStyle: \"\",\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === \"dir\") {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n  log.info(\"Drawing state diagram (v2)\", id);\n  nodeDb = {};\n  diag.db.getDirection();\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n  log.info(diag.db.getRootDocV2());\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n  const diagramStates = diag.db.getStates();\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: getDir(diag.db.getRootDocV2()),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"barb\"], CSS_DIAGRAM, id);\n  const padding = 8;\n  utils.insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  svg.attr(\"class\", CSS_DIAGRAM);\n  const svgBounds = svg.node().getBBox();\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr(\"viewBox\", vBox);\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    const dim = label.getBBox();\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n    rect.setAttribute(\"rx\", 0);\n    rect.setAttribute(\"ry\", 0);\n    rect.setAttribute(\"width\", dim.width);\n    rect.setAttribute(\"height\", dim.height);\n    label.insertBefore(rect, label.firstChild);\n  }\n};\nconst renderer = {\n  setConf,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["SHAPE_STATE","SHAPE_STATE_WITH_DESC","CSS_DIAGRAM","CSS_DIAGRAM_STATE","concat","CSS_EDGE","CSS_EDGE_NOTE_EDGE","CSS_DIAGRAM_NOTE","CSS_DIAGRAM_CLUSTER","CSS_DIAGRAM_CLUSTER_ALT","PARENT","NOTE","DOMID_TYPE_SPACER","NOTE_ID","PARENT_ID","G_EDGE_STYLE","G_EDGE_ARROWHEADSTYLE","G_EDGE_LABELTYPE","G_EDGE_THICKNESS","nodeDb","graphItemCount","stateDomId","itemId","arguments","length","undefined","counter","type","typeSpacer","typeStr","setupNode","g","parent","parsedItem","diagramStates","diagramDb","altFlag","dbInfoItem","id","classStr","classes","join","shape","start","DEFAULT_STATE_TYPE","description","common","getConfig","newNode","Array","isArray","push","doc","log","getDir","dir","DIVIDER_TYPE","nodeData","labelStyle","labelText","style","domId","padding","note","noteData","text","groupData","parentNodeId","setNode","setParent","from","to","position","setEdge","arrowhead","arrowType","arrowheadStyle","labelpos","labelType","thickness","setupDoc","parentParsedItem","forEach","item","stmt","STMT_STATE","STMT_RELATION","state1","state2","edgeData","arrowTypeEnd","label","DEFAULT_NESTED_DOC_DIR","i","parsedItemDoc","value","draw","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_version","diag","_getConfig","securityLevel","conf","nodeSpacing","rankSpacing","sandboxElement","root","svg","element","bounds","width","height","svgBounds","vBox","labels","_iterator","_step","dim","rect","wrap","_context","prev","next","db","getDirection","state","getRootDocV2","extract","getStates","graphlib","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","select","nodes","contentDocument","body","render","utils","titleTopMargin","getDiagramTitle","node","getBBox","attr","configureSvgSize","useMaxWidth","x","y","document","querySelectorAll","_createForOfIteratorHelper","s","n","done","createElementNS","setAttribute","insertBefore","firstChild","err","e","f","stop","_x","_x2","_x3","_x4","apply","renderer","setConf","cnf","_i","_keys","Object","keys","getClasses","diagramObj","clear","parser","parse","diagram","styles","init","arrowMarkerAbsolute"],"sourceRoot":""}