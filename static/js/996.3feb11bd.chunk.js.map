{"version":3,"file":"static/js/996.3feb11bd.chunk.js","mappings":"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","sources":["services/UploadService.ts","components/UploadComponent.tsx","components/BaseFormComponent.tsx","webpack://spirify/./src/pages/dashboard/EventFormPage.module.scss?5fe9","pages/dashboard/EventFormPage.tsx","services/EventService.ts"],"sourcesContent":["// UploadService.ts\r\nimport ApiManager from './ApiManager';\r\n\r\nclass UploadService {\r\n    static async uploadFile(file: File) {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        const response = await ApiManager.getInstance().getAxiosInstance().post('/api/Upload', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n\r\n        return response.data;\r\n    }\r\n\r\n    static async deleteFile(fullUrl: string) {\r\n        const filePath = fullUrl.replace(ApiManager.BASE_URL, \"\");\r\n\r\n        const response = await ApiManager.getInstance().getAxiosInstance().delete(`/api/upload?filePath=${filePath}`);\r\n        return response.data;\r\n    }\r\n}\r\n\r\nexport default UploadService;\r\n","import { Button, Upload } from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { useState } from \"react\";\r\nimport UploadService from \"services/UploadService\";\r\n\r\ninterface UploadComponentProps {\r\n\tform: any; // Replace `any` with the correct type\r\n\tfieldName: string; // Replace `any` with the correct type\r\n}\r\n\r\n// Define your own type for the custom request options\r\ninterface CustomRequestOptions {\r\n\tfile: File;\r\n\tonProgress: (event: { percent: number }) => void;\r\n\tonSuccess: (response: any, file: File | Blob) => void;\r\n\tonError: (error: any) => void;\r\n}\r\n\r\nexport const UploadComponent: React.FC<UploadComponentProps> = ({\r\n\tform,\r\n\tfieldName,\r\n}) => {\r\n\tconst [filePath, setFilePath] = useState<string | null>(null);\r\n\r\n\tconst handleUploadChange = (info: any) => {\r\n\t\tif (info.file.status === \"done\") {\r\n\t\t\tconst filePath = info.file.response.filePath;\r\n\t\t\tsetFilePath(filePath);\r\n\t\t\tform.setFieldsValue({ [fieldName]: filePath });\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleDelete = async () => {\r\n\t\ttry {\r\n\t\t\tif (filePath) {\r\n\t\t\t\tawait UploadService.deleteFile(filePath);\r\n\t\t\t\tsetFilePath(null);\r\n\t\t\t\tform.setFieldsValue({ [fieldName]: null });\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst customRequest = async ({\r\n\t\tfile,\r\n\t\tonProgress,\r\n\t\tonSuccess,\r\n\t\tonError,\r\n\t}: CustomRequestOptions) => {\r\n\t\ttry {\r\n\t\t\t// Upload the file\r\n\t\t\tconst response = await UploadService.uploadFile(file);\r\n\r\n\t\t\t// Call onSuccess with the response\r\n\t\t\tonSuccess(response, file);\r\n\t\t} catch (error) {\r\n\t\t\t// Call onError with the error\r\n\t\t\tonError(error);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Upload\r\n\t\t\tname=\"logo\"\r\n\t\t\tcustomRequest={customRequest as any}\r\n\t\t\tlistType=\"picture\"\r\n\t\t\tonRemove={handleDelete}\r\n\t\t\tonChange={handleUploadChange}\r\n\t\t>\r\n\t\t\t<Button icon={<UploadOutlined />}>Click to upload</Button>\r\n\t\t</Upload>\r\n\t);\r\n};\r\n","import React from \"react\";\r\nimport {\r\n\tForm,\r\n\tInput,\r\n\tDatePicker,\r\n\tCheckbox,\r\n\tButton,\r\n\tInputNumber,\r\n\tTimePicker,\r\n} from \"antd\";\r\nimport { UploadComponent } from \"./UploadComponent\";\r\n\r\nexport interface FieldProps {\r\n\tname: string;\r\n\tlabel: string;\r\n\trules?: any[];\r\n\ttype?:\r\n\t\t| \"input\"\r\n\t\t| \"textarea\"\r\n\t\t| \"date\"\r\n\t\t| \"checkbox\"\r\n\t\t| \"number\"\r\n\t\t| \"time\"\r\n\t\t| \"datetime\"\r\n\t\t| \"image\"\r\n\t\t| \"object\";\r\n\tvalue?: any;\r\n\tfields?: FieldProps[];\r\n}\r\n\r\ninterface BaseFormProps {\r\n\tfields: FieldProps[];\r\n\tonFinish: (values: any) => void;\r\n\tinitialValues?: Record<string, any>;\r\n}\r\n\r\nconst BaseFormComponent: React.FC<BaseFormProps> = ({\r\n\tfields,\r\n\tonFinish,\r\n\tinitialValues,\r\n}) => {\r\n\tconst [form] = Form.useForm();\r\n\r\n\tconst renderField = (field: FieldProps, fieldName?: string[]) => {\r\n\t\tconst fieldKey = fieldName ? [...fieldName, field.name] : [field.name];\r\n\t\tlet fieldInput;\r\n\r\n\t\tswitch (field.type) {\r\n\t\t\tcase \"textarea\":\r\n\t\t\t\tfieldInput = <Input.TextArea />;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"date\":\r\n\t\t\t\tfieldInput = <DatePicker format=\"YYYY-MM-DD\" showTime={false} />;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tfieldInput = <Checkbox />;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"number\":\r\n\t\t\t\tfieldInput = <InputNumber />;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"time\":\r\n\t\t\t\tfieldInput = <TimePicker />;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"datetime\":\r\n\t\t\t\tfieldInput = <DatePicker showTime />;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"image\":\r\n\t\t\t\tfieldInput = (\r\n\t\t\t\t\t<Form.Item valuePropName=\"fileList\" extra=\"Image Preview\">\r\n\t\t\t\t\t\t<UploadComponent form={form} fieldName={field.name} />\r\n\t\t\t\t\t</Form.Item>\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tfieldInput = <Input />;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<Form.Item\r\n\t\t\t\tkey={fieldKey.join(\".\")}\r\n\t\t\t\tname={fieldKey}\r\n\t\t\t\tlabel={field.label}\r\n\t\t\t\trules={field.rules}\r\n\t\t\t>\r\n\t\t\t\t{fieldInput}\r\n\t\t\t</Form.Item>\r\n\t\t);\r\n\t};\r\n\r\n\tconst renderFields = (fields: FieldProps[], fieldName?: string[]) => {\r\n\t\treturn fields.map((field) =>\r\n\t\t\tfield.type === \"object\" && field.fields\r\n\t\t\t\t? field.fields.map((subField) =>\r\n\t\t\t\t\t\trenderField(\r\n\t\t\t\t\t\t\tsubField,\r\n\t\t\t\t\t\t\tfieldName ? [...fieldName, field.name] : [field.name]\r\n\t\t\t\t\t\t)\r\n\t\t\t\t  )\r\n\t\t\t\t: renderField(field, fieldName)\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Form\r\n\t\t\tform={form}\r\n\t\t\tlayout=\"vertical\"\r\n\t\t\tonFinish={onFinish}\r\n\t\t\tinitialValues={initialValues}\r\n\t\t\tencType=\"multipart/form-data\"\r\n\t\t>\r\n\t\t\t{renderFields(fields)}\r\n\t\t\t<Form.Item>\r\n\t\t\t\t<div style={{ textAlign: \"right\" }}>\r\n\t\t\t\t\t<Button type=\"primary\" htmlType=\"submit\">\r\n\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</Form.Item>\r\n\t\t</Form>\r\n\t);\r\n};\r\n\r\nexport default BaseFormComponent;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"eventFormPage\":\"EventFormPage_eventFormPage__ChdmJ\",\"avatarUploader\":\"EventFormPage_avatarUploader__2C+2W\",\"avatarPreview\":\"EventFormPage_avatarPreview__cnVws\"};","// AddEventPage.tsx\r\nimport React from \"react\";\r\nimport { Typography, message } from \"antd\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styles from \"./EventFormPage.module.scss\";\r\nimport BaseFormComponent, { FieldProps } from \"components/BaseFormComponent\";\r\nimport { Event } from \"./EventDetailPage\";\r\nimport dayjs from \"dayjs\";\r\nimport eventService from \"services/EventService\";\r\n\r\ntype FormValues = Omit<\r\n\tEvent,\r\n\t\"organizer\" | \"organizerId\" | \"currentParticipants\"\r\n> & {\r\n\tstreet: string;\r\n\tcity: string;\r\n\tstate: string;\r\n\tcountry: string;\r\n\tzipCode: string;\r\n};\r\nconst EventFormPage: React.FC = () => {\r\n\tconst navigate = useNavigate();\r\n\tconst techConferenceFormValues: FormValues = {\r\n\t\tname: \"Tech Conference 2023\",\r\n\t\tdescription:\r\n\t\t\t\"An annual gathering of tech enthusiasts, developers, and innovators. Features keynotes, workshops, and networking sessions.\",\r\n\t\toverview:\r\n\t\t\t\"Join us for the Tech Conference 2023 where you will have the opportunity to learn about the latest trends in technology, hear from industry experts, and network with fellow tech enthusiasts.\",\r\n\t\timage: \"https://example.com/image.jpg\",\r\n\t\tstartDateTime: dayjs().add(1, \"month\").hour(9).minute(0),\r\n\t\tendDateTime: dayjs().add(1, \"month\").hour(18).minute(0),\r\n\t\tlocation: \"Conference Hall\",\r\n\t\tminPeople: 50,\r\n\t\tmaxPeople: 500,\r\n\t\teventType: \"Conference\",\r\n\t\ttargetAudience: \"Developers, Tech Enthusiasts, Innovators\",\r\n\t\tfee: 50,\r\n\t\tstreet: \"1 Marina Blvd\",\r\n\t\tcity: \"Singapore\",\r\n\t\tstate: \"Singapore\",\r\n\t\tcountry: \"Singapore\",\r\n\t\tzipCode: \"018989\",\r\n\t};\r\n\r\n\tconst onFinish = async (values: FormValues) => {\r\n\t\ttry {\r\n\t\t\tawait eventService.createEvent(values);\r\n\t\t\tnavigate(`/dashboard/event/`);\r\n\t\t} catch (error) {\r\n\t\t\tmessage.error(\"An error occurred while creating the event\");\r\n\t\t}\r\n\t};\r\n\r\n\tconst fields: FieldProps[] = [\r\n\t\t{\r\n\t\t\tname: \"name\",\r\n\t\t\tlabel: \"Name\",\r\n\t\t\trules: [{ required: true, message: \"Please input the event name!\" }],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"image\",\r\n\t\t\tlabel: \"Image\",\r\n\t\t\ttype: \"image\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"overview\",\r\n\t\t\tlabel: \"Overview\",\r\n\t\t\trules: [{ required: true, message: \"Please input the event overview!\" }],\r\n\t\t\ttype: \"textarea\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"description\",\r\n\t\t\tlabel: \"Description\",\r\n\t\t\ttype: \"textarea\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"location\",\r\n\t\t\tlabel: \"Location\",\r\n\t\t\ttype: \"input\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"street\",\r\n\t\t\tlabel: \"Street\",\r\n\t\t\trules: [{ required: true, message: \"Please input the street!\" }],\r\n\t\t\ttype: \"input\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"city\",\r\n\t\t\tlabel: \"City\",\r\n\t\t\trules: [{ required: true, message: \"Please input the city!\" }],\r\n\t\t\ttype: \"input\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"state\",\r\n\t\t\tlabel: \"State\",\r\n\t\t\trules: [{ required: true, message: \"Please input the state!\" }],\r\n\t\t\ttype: \"input\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"country\",\r\n\t\t\tlabel: \"Country\",\r\n\t\t\trules: [{ required: true, message: \"Please input the country!\" }],\r\n\t\t\ttype: \"input\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"zipCode\",\r\n\t\t\tlabel: \"Zip Code\",\r\n\t\t\trules: [{ required: true, message: \"Please input the zip code!\" }],\r\n\t\t\ttype: \"input\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"startDateTime\",\r\n\t\t\tlabel: \"Start Date\",\r\n\t\t\trules: [{ required: true, message: \"Please input the start date!\" }],\r\n\t\t\ttype: \"datetime\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"endDateTime\",\r\n\t\t\tlabel: \"End Date\",\r\n\t\t\ttype: \"datetime\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"minPeople\",\r\n\t\t\tlabel: \"Min People\",\r\n\t\t\ttype: \"number\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"maxPeople\",\r\n\t\t\tlabel: \"Max People\",\r\n\t\t\ttype: \"number\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"eventType\",\r\n\t\t\tlabel: \"Event Type\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"targetAudience\",\r\n\t\t\tlabel: \"Target Audience\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"fee\",\r\n\t\t\tlabel: \"Fee\",\r\n\t\t\ttype: \"number\",\r\n\t\t},\r\n\t];\r\n\r\n\treturn (\r\n\t\t<div className={styles.eventFormPage}>\r\n\t\t\t<Typography.Title>Add a new Event</Typography.Title>\r\n\r\n\t\t\t<BaseFormComponent\r\n\t\t\t\tfields={fields}\r\n\t\t\t\tonFinish={onFinish}\r\n\t\t\t\tinitialValues={techConferenceFormValues}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default EventFormPage;\r\n","import ApiManager from \"./ApiManager\";\r\n\r\nclass EventService {\r\n    private axiosInstance: any;\r\n\r\n    constructor() {\r\n        this.axiosInstance = ApiManager.getInstance().getAxiosInstance();\r\n    }\r\n\r\n    async createEvent(values: any) {\r\n        const response = await this.axiosInstance.post('/api/Event', values);\r\n        return response.data;\r\n    }\r\n\r\n    async getEvent(id: string) {\r\n        const response = await this.axiosInstance.get(`/api/Event/${id}`);\r\n        return response.data;\r\n    }\r\n\r\n    async deleteEvent(id: string) {\r\n        const response = await this.axiosInstance.delete(`/api/Event/${id}`);\r\n        return response.data;\r\n    }\r\n\r\n    async joinEvent(id: string) {\r\n        const response = await this.axiosInstance.post(`/api/Event/Join/${id}`);\r\n        return response.data;\r\n    }\r\n}\r\n\r\nconst eventService = new EventService();\r\nexport default eventService;\r\n"],"names":["UploadService","_classCallCheck","_createClass","key","value","_uploadFile","_asyncToGenerator","_regeneratorRuntime","mark","_callee","file","formData","response","wrap","_context","prev","next","FormData","append","ApiManager","getAxiosInstance","post","headers","sent","abrupt","data","stop","_x","apply","arguments","_deleteFile","_callee2","fullUrl","filePath","_context2","replace","delete","concat","_x2","UploadComponent","_ref","form","fieldName","_useState","useState","_useState2","_slicedToArray","setFilePath","handleDelete","_ref2","setFieldsValue","_defineProperty","t0","console","log","customRequest","_ref4","_ref3","onSuccess","onError","_response","onProgress","_jsx","Upload","name","listType","onRemove","onChange","info","status","children","Button","icon","UploadOutlined","fields","onFinish","initialValues","_Form$useForm","Form","renderField","field","fieldInput","fieldKey","_toConsumableArray","type","Input","DatePicker","format","showTime","Checkbox","InputNumber","TimePicker","valuePropName","extra","label","rules","join","_jsxs","layout","encType","map","subField","renderFields","style","textAlign","htmlType","navigate","useNavigate","techConferenceFormValues","description","overview","image","startDateTime","dayjs","add","hour","minute","endDateTime","location","minPeople","maxPeople","eventType","targetAudience","fee","street","city","state","country","zipCode","values","eventService","message","className","styles","Typography","BaseFormComponent","required","EventService","axiosInstance","this","_createEvent","_getEvent","id","get","_deleteEvent","_callee3","_context3","_x3","_joinEvent","_callee4","_context4","_x4"],"sourceRoot":""}