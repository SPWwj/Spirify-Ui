{"version":3,"file":"static/js/5690.68550ee5.chunk.js","mappings":"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","sources":["components/ssml/Editor.tsx","components/ssml/AudioSynthesis.tsx","components/ssml/Preview.tsx","pages/SSMLEditorPage.tsx"],"sourcesContent":["import React from \"react\";\r\nimport AceEditor from \"react-ace\";\r\nimport { Button } from \"antd\";\r\nimport ace from \"ace-builds\";\r\n\r\nimport \"ace-builds/src-noconflict/mode-xml\";\r\nimport \"ace-builds/src-noconflict/theme-chaos\";\r\n\r\n// This line is important to tell ace editor where to load worker scripts from\r\nace.config.set(\"basePath\", \"/static/js\");\r\n\r\ninterface EditorProps {\r\n\tssml: string;\r\n\tonSSMLChange: (value: string) => void;\r\n\tformatSSML: (ssml: string, maxLength: number) => string;\r\n}\r\n\r\nconst Editor: React.FC<EditorProps> = ({ ssml, onSSMLChange, formatSSML }) => {\r\n\tconst handleFormatClick = () => {\r\n\t\tonSSMLChange(formatSSML(ssml, 80));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\tposition: \"relative\",\r\n\t\t\t\tborder: \"1px solid #F8F8F2\",\r\n\t\t\t\tborderRadius: \"15px\",\r\n\t\t\t\toverflow: \"hidden\",\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<AceEditor\r\n\t\t\t\twidth=\"100%\"\r\n\t\t\t\tmode=\"xml\"\r\n\t\t\t\ttheme=\"chaos\"\r\n\t\t\t\tonChange={onSSMLChange}\r\n\t\t\t\tvalue={ssml}\r\n\t\t\t\tname=\"ssml-editor\"\r\n\t\t\t\tsetOptions={{\r\n\t\t\t\t\tmaxLines: 20,\r\n\t\t\t\t}}\r\n\t\t\t\teditorProps={{\r\n\t\t\t\t\t$blockScrolling: true,\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t\t<Button\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\tbottom: \"20px\",\r\n\t\t\t\t\tright: \"30px\",\r\n\t\t\t\t\tbackgroundColor: \"#272822\",\r\n\t\t\t\t\tborderColor: \"#F8F8F2\",\r\n\t\t\t\t\tcolor: \"#F8F8F2\",\r\n\t\t\t\t\tborder: \"1px solid #F8F8F2\",\r\n\t\t\t\t}}\r\n\t\t\t\tonClick={handleFormatClick}\r\n\t\t\t>\r\n\t\t\t\tFormat\r\n\t\t\t</Button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\ninterface PreviewProps {\r\n\tssml: string;\r\n}\r\n\r\nconst AudioSynthesis: React.FC<PreviewProps> = ({ ssml }) => {\r\n\tconst synthesizeSpeech = () => {\r\n\t\tvar msg = new SpeechSynthesisUtterance();\r\n\t\tmsg.text = ssml;\r\n\t\twindow.speechSynthesis.speak(msg);\r\n\t};\r\n\r\n\treturn <Button onClick={synthesizeSpeech}>Preview</Button>;\r\n};\r\n\r\nexport default AudioSynthesis;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Typography, Avatar, Card } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport AudioSynthesis from \"./AudioSynthesis\";\r\n\r\ninterface PreviewProps {\r\n\tssml: string;\r\n}\r\n\r\nconst Preview: React.FC<PreviewProps> = ({ ssml }) => {\r\n\tconst [imgError, setImgError] = useState(false);\r\n\tconst [parsedText, setParsedText] = useState(\"\");\r\n\r\n\tconst avatarImg = (\r\n\t\t<img\r\n\t\t\tsrc=\"/path/to/avatar.png\"\r\n\t\t\talt=\"avatar\"\r\n\t\t\tonError={() => setImgError(true)}\r\n\t\t/>\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\t// parse the SSML\r\n\t\tlet parser = new DOMParser();\r\n\t\tlet xmlDoc = parser.parseFromString(ssml, \"text/xml\");\r\n\t\t// find all text nodes and join their text content\r\n\t\tlet text = Array.from(xmlDoc.querySelectorAll(\"*\"))\r\n\t\t\t.filter((el) => el.childElementCount === 0)\r\n\t\t\t.map((el) => el.textContent)\r\n\t\t\t.join(\" \");\r\n\t\tsetParsedText(text);\r\n\t}, [ssml]);\r\n\r\n\treturn (\r\n\t\t<Card\r\n\t\t\tcover={\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\t\t\tmarginTop: \"5px\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Avatar size={64} icon={imgError ? <UserOutlined /> : avatarImg} />\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\tactions={[<AudioSynthesis ssml={ssml} />]}\r\n\t\t>\r\n\t\t\t<Typography.Paragraph style={{ padding: 12 }}>\r\n\t\t\t\t{parsedText}\r\n\t\t\t</Typography.Paragraph>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default Preview;\r\n","import React, { useState } from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport Editor from \"components/ssml/Editor\";\r\nimport Preview from \"components/ssml/Preview\";\r\nfunction formatSSML(\r\n\tinput: string,\r\n\tmaxLength: number,\r\n\tindentSpaces: number = 2\r\n): string {\r\n\tlet formatted: string[] = [];\r\n\tlet currentLine = \"\";\r\n\tlet currentIndent = \"\";\r\n\tlet tokens = input\r\n\t\t.split(/(<[^>]*>)/g)\r\n\t\t.filter((token) => token.trim().length > 0);\r\n\r\n\ttokens.forEach((token) => {\r\n\t\tif (token.startsWith(\"<\")) {\r\n\t\t\tif (currentLine.trim().length > 0) {\r\n\t\t\t\tformatted.push(currentLine);\r\n\t\t\t}\r\n\t\t\tif (token.startsWith(\"</\")) {\r\n\t\t\t\t// Dedent after closing tag\r\n\t\t\t\tcurrentIndent = currentIndent.slice(0, -indentSpaces);\r\n\t\t\t}\r\n\t\t\t// Prepare for new line\r\n\t\t\tcurrentLine = currentIndent + token;\r\n\t\t\tif (\r\n\t\t\t\t!token.startsWith(\"</\") &&\r\n\t\t\t\t!token.endsWith(\"/>\") &&\r\n\t\t\t\t!token.endsWith(\"?>\")\r\n\t\t\t) {\r\n\t\t\t\t// Indent after opening tag\r\n\t\t\t\tcurrentIndent += \" \".repeat(indentSpaces);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Handle content inside tags\r\n\t\t\tlet words = token.trim().split(/\\s+/);\r\n\t\t\twords.forEach((word) => {\r\n\t\t\t\tif ((currentLine + \" \" + word).length > maxLength) {\r\n\t\t\t\t\t// Start new line if adding the word would exceed maxLength\r\n\t\t\t\t\tformatted.push(currentLine);\r\n\t\t\t\t\tcurrentLine = currentIndent + word;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Otherwise, add the word to the current line\r\n\t\t\t\t\tcurrentLine += \" \" + word;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\t// Add the last line to output if it's non-empty\r\n\tif (currentLine.trim().length > 0) {\r\n\t\tformatted.push(currentLine);\r\n\t}\r\n\r\n\treturn formatted.join(\"\\n\");\r\n}\r\n\r\nfunction SSMLEditorPage() {\r\n\tconst ssmlExample = `\r\n\t<?xml version=\"1.0\"?>\r\n\t<speak version=\"1.0\" \r\n\t\txmlns=\"http://www.w3.org/2001/10/synthesis\"\r\n\t\txml:lang=\"en-US\">\r\n\t<voice name=\"en-US-LisaNeural\">\r\n\t\t<prosody rate=\"medium\">\r\n\t\t<p>\r\n\t\t\tHello there! I'm a virtual assistant. I can assist you with a wide variety of tasks, like setting reminders, answering questions, or controlling smart home devices.\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t\t<emphasis level=\"strong\">Can I help you with anything today?</emphasis>\r\n\t\t</p>\r\n\t\t</prosody>\r\n\t</voice>\r\n\t</speak>`;\r\n\r\n\tconst [ssml, setSSML] = useState<string>(formatSSML(ssmlExample, 80));\r\n\t// const [ssml, setSSML] = useState<string>(ssmlExample);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Row gutter={[16, 16]} style={{ marginTop: \"10px\" }}>\r\n\t\t\t\t<Col xs={24} md={12}>\r\n\t\t\t\t\t<Editor ssml={ssml} onSSMLChange={setSSML} formatSSML={formatSSML} />\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col xs={24} md={12} style={{ margin: \"auto\" }}>\r\n\t\t\t\t\t<Preview ssml={ssml} />\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SSMLEditorPage;\r\n"],"names":["ace","_ref","ssml","onSSMLChange","formatSSML","_jsxs","style","position","border","borderRadius","overflow","children","_jsx","AceEditor","width","mode","theme","onChange","value","name","setOptions","maxLines","editorProps","$blockScrolling","Button","bottom","right","backgroundColor","borderColor","color","onClick","msg","SpeechSynthesisUtterance","text","window","speechSynthesis","speak","_useState","useState","_useState2","_slicedToArray","imgError","setImgError","_useState3","_useState4","parsedText","setParsedText","avatarImg","src","alt","onError","useEffect","xmlDoc","DOMParser","parseFromString","Array","from","querySelectorAll","filter","el","childElementCount","map","textContent","join","Card","cover","display","justifyContent","marginTop","Avatar","size","icon","UserOutlined","actions","AudioSynthesis","Typography","padding","input","maxLength","indentSpaces","arguments","length","undefined","formatted","currentLine","currentIndent","split","token","trim","forEach","startsWith","push","slice","endsWith","repeat","word","setSSML","Row","gutter","Col","xs","md","Editor","margin","Preview"],"sourceRoot":""}