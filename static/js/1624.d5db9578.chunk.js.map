{"version":3,"file":"static/js/1624.d5db9578.chunk.js","mappings":"2LAmBA,EAVoD,SAAHA,GAA6B,IAAvBC,EAAKD,EAALC,MAAOC,EAAQF,EAARE,SAC5D,OACEC,EAAAA,EAAAA,KAAA,YACEF,MAAOA,EACPC,SAAU,SAACE,GAAC,OAAKF,EAASE,EAAEC,OAAOJ,MAAM,EACzCK,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAGtC,E,iCCaA,EArBsD,SAAHR,GAAkB,IAAZS,EAAIT,EAAJS,KACjDC,GAAMC,EAAAA,EAAAA,QAAuB,MAiBnC,OAfAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,WAAmB,CAAEC,aAAa,IAClC,IAAMC,EAAa,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEAZ,EAAAA,EAAAA,OAAe,WAAYJ,GAAM,KAAD,EAA5CY,EAAGE,EAAAG,KACLhB,EAAIiB,UACNjB,EAAIiB,QAAQC,UAAYP,EAAIA,KAC7BE,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEDO,QAAQC,MAAKR,EAAAM,IAAI,yBAAAN,EAAAS,OAAA,GAAAZ,EAAA,kBAEpB,kBATkB,OAAAJ,EAAAiB,MAAA,KAAAC,UAAA,KAUnBnB,GACF,GAAG,CAACN,KAEGN,EAAAA,EAAAA,KAAA,OAAKO,IAAKA,GACnB,ECeA,EArC8B,WAC5B,IAAAyB,GAAwBC,EAAAA,EAAAA,UAAS,2bAsB/BC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAtBK1B,EAAI4B,EAAA,GAAEE,EAAOF,EAAA,GAwBpB,OACEG,EAAAA,EAAAA,MAAA,OAAKlC,MAAO,CAAEmC,QAAS,OAAQjC,OAAQ,SAAUkC,SAAA,EAC/CvC,EAAAA,EAAAA,KAAA,OAAKG,MAAO,CAAEqC,KAAM,GAAID,UACtBvC,EAAAA,EAAAA,KAACyC,EAAa,CAAC3C,MAAOQ,EAAMP,SAAUqC,OAExCpC,EAAAA,EAAAA,KAAA,OAAKG,MAAO,CAAEqC,KAAM,GAAID,UACtBvC,EAAAA,EAAAA,KAAC0C,EAAc,CAACpC,KAAMA,QAI9B,C","sources":["components/mermaid/MermaidEditor.tsx","components/mermaid/MermaidPreview.tsx","pages/MermaidPage.tsx"],"sourcesContent":["// MermaidEditor.tsx\r\n\r\nimport React, { useState } from 'react';\r\n\r\ninterface MermaidEditorProps {\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nconst MermaidEditor: React.FC<MermaidEditorProps> = ({ value, onChange }) => {\r\n  return (\r\n    <textarea\r\n      value={value}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      style={{ width: '100%', height: '100%' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MermaidEditor;\r\n","// MermaidPreview.tsx\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\nimport mermaid from 'mermaid';\r\n\r\ninterface MermaidPreviewProps {\r\n  code: string;\r\n}\r\n\r\nconst MermaidPreview: React.FC<MermaidPreviewProps> = ({ code }) => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    mermaid.initialize({ startOnLoad: true });\r\n    const renderMermaid = async () => {\r\n      try {\r\n        const svg = await mermaid.render('graphDiv', code);\r\n        if (ref.current) {\r\n          ref.current.innerHTML = svg.svg;\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    renderMermaid();\r\n  }, [code]);\r\n\r\n  return <div ref={ref} />;\r\n};\r\n\r\nexport default MermaidPreview;\r\n","// MermaidPage.tsx\r\n\r\nimport MermaidEditor from 'components/mermaid/MermaidEditor';\r\nimport MermaidPreview from 'components/mermaid/MermaidPreview';\r\nimport React, { useState } from 'react';\r\n\r\nconst MermaidPage: React.FC = () => {\r\n  const [code, setCode] = useState(`\r\nmindmap\r\n  root((Think Creatively))\r\n    Brainstorming\r\n      Free Writing\r\n      Mind Mapping\r\n      Role Playing\r\n    Divergent Thinking\r\n      Question Assumptions\r\n      SCAMPER\r\n      Random Input\r\n    Convergent Thinking\r\n      SWOT Analysis\r\n      Six Thinking Hats\r\n      PMI\r\n    Lateral Thinking\r\n      Provocation\r\n      Random Entry\r\n    Critical Thinking\r\n      Logical Reasoning\r\n      Evaluation\r\n      Problem Solving\r\n  `);\r\n\r\n  return (\r\n    <div style={{ display: 'flex', height: '100vh' }}>\r\n      <div style={{ flex: 1 }}>\r\n        <MermaidEditor value={code} onChange={setCode} />\r\n      </div>\r\n      <div style={{ flex: 1 }}>\r\n        <MermaidPreview code={code} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MermaidPage;\r\n"],"names":["_ref","value","onChange","_jsx","e","target","style","width","height","code","ref","useRef","useEffect","mermaid","startOnLoad","renderMermaid","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","svg","wrap","_context","prev","next","sent","current","innerHTML","t0","console","error","stop","apply","arguments","_useState","useState","_useState2","_slicedToArray","setCode","_jsxs","display","children","flex","MermaidEditor","MermaidPreview"],"sourceRoot":""}